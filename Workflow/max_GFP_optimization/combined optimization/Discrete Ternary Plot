using DifferentialEquations, DiffEqCallbacks, Plots, TernaryPlots, Colors

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function run_simulation(dna_conc, energy_conc, tau)
    initial_conditions = [energy_conc, dna_conc, 0.0, 0.0, 0.0, 0.0, 1.51]
    params = [2.0, 833.0, 4.0, 236.0, energy_conc * 0.0, 0.0, dna_conc * 0.0, 1000.0, 1.0, 0.038153465,
              0.084, 1.51 * 0.0, 3750.0, 54.75, 105.0, 100.0]
    
    function discreteDilute!(integrator)
        f_V, tau, s1, s2, tmax, tsave, nspecies, dilSpecs = integrator.p[end-7:end]
        INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C, INDEX_CONT, CONC_CONT_A, CONC_CONT_B = dilSpecs
    
        if integrator.t < s1 * 60  # Stage 1
            for j in 1:nspecies
                integrator.u[j] *= (1 - f_V)  # Dilution by factor (1 - f_V)
            end
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]  # Add fresh material back in
            end
        elseif s1 * 60 <= integrator.t < s2 * 60  # Stage 2
            for j in 1:nspecies
                integrator.u[j] *= (1 - f_V)
            end
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        elseif s2 * 60 <= integrator.t  # Stage 3
            for j in 1:nspecies
                integrator.u[j] *= (1 - f_V)
            end
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end

    u0 = initial_conditions
    idx_e, idx_D_G, idx_m_G, idx_cl_G, idx_G, idx_G_m, idx_R = 1, 2, 3, 4, 5, 6, 7

    INDEX_DISC_A = [idx_e, idx_D_G, idx_R]
    CONC_DISC_A = [u0[1], u0[2], u0[7]]
    INDEX_DISC_B = [idx_e, idx_R]
    CONC_DISC_B = [u0[1], u0[7]]
    INDEX_DISC_C = [idx_e, idx_R]
    CONC_DISC_C = [u0[1], u0[7]]
    INDEX_CONT = [14, 15, 16]
    CONC_CONT_A = [33600.0, 0.0, 1.51]
    CONC_CONT_B = [33600.0, 0.0, 1.51]
    dilSpecs = (INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C, INDEX_CONT, CONC_CONT_A, CONC_CONT_B)
    f_V = 0.2  # Dilution fraction
    s1, s2, tmax, tsave, nspecies = 9.0, 0.0, 20.0, 100.0, 7
    params_with_dilution = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies, dilSpecs])

    periodcb = PeriodicCallback(discreteDilute!, tau; save_positions=(false,false))
    cb = CallbackSet(periodcb) #, savecb)
    
    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_with_dilution)
    sol = solve(prob, Tsit5(), callback=periodcb, saveat=1.0)

    return sol[5, end]
end

#region <plot ODE for single value>
"""function plot_simulation(dna_conc, energy_conc, tau)
    sol = run_simulation(dna_conc, energy_conc, tau)  # Run the simulation

    # Labels for the variables in the model
    labels = ["D", "m", "cl", "G", "Gm", "R"]
    
    # Time values for plotting (convert time from seconds to minutes)
    time_vals = sol.t / 60  # Convert from seconds to minutes

    # Create an empty plot
    ODEfig = plot()

    # Loop through the solution for each state variable (skip the first one as it's for time)
    for i in 2:length(labels) + 1
        plot!(ODEfig, time_vals, sol[i, :], label=labels[i-1], linewidth=2)
    end

    # Customize the plot
    xlabel!(ODEfig, "Time (minutes)")   # X-axis label
    ylabel!(ODEfig, "Concentration (Î¼M)")  # Y-axis label
    title!(ODEfig, "ODE Model with Discrete Dilution")  # Title

    # Display the plot
    display(ODEfig)
end

# Call the plot_simulation function with the desired input values
plot_simulation(0.005, 33600, 20)  # Example values for dna_conc, energy_conc, and tau"""
#endregion

function create_ternary_plot()
    # Create a grid of values for DNA, energy, and tau
    dna_conc_vals = 0.001:0.001:0.01
    energy_conc_vals = 30000:10000:60000
    tau_vals = 10:10:150

    # Create arrays to store the corresponding GFP production values
    gfp_vals = Float64[]

    # Loop over all combinations of dna_conc, energy_conc, and tau
    for dna_conc in dna_conc_vals
        for energy_conc in energy_conc_vals
            for tau in tau_vals
                gfp = run_simulation(dna_conc, energy_conc, tau)  # Run the simulation for the current set of parameters
                push!(gfp_vals, gfp)  # Store the GFP production value
            end
        end
    end

    # Create the ternary plot
    ternarycontourf(dna_conc_vals, energy_conc_vals, tau_vals, gfp_vals, xlabel="DNA Concentration", ylabel="Energy Concentration", zlabel="Tau")
end

# Call the function to create the ternary plot
create_ternary_plot()