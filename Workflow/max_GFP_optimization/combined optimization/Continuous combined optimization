using DataFrames, DifferentialEquations, Plots, Optimization, OptimizationOptimJL, Zygote, SciMLSensitivity, OptimizationBBO

# Define the model
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    Din = t < 540 ? Din_init : 0.0

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e  # Energy balance
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function optimizer(x, p)
    init_cond = [x[1], x[2], 0.0, 0.0, 0.0, 0.0, 1.51]  

    params = [2.0, 833.0, 4.0, 236.0, x[1] * (0.2 / x[3]), (0.2 / x[3]), x[2] * (0.2 / x[3]),
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / x[3]), 3750.0, 54.75, 105.0, 100.0]

    prob = ODEProblem(model!, init_cond, (0.0, 1000.0), params)
    sol = solve(prob, RadauIIA5(), saveat=1.0)

    max_Gm = maximum(sol[6, :])
    return -max_Gm  # Negative for minimization
end

x_initial = [33600.0, 0.015, 20.0]
lb, ub = [1000.0, 0.001, 10.0], [60000.0, 0.02, 150.0]

initial_conditions = [x_initial[1], x_initial[2], 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * (0.2 / x_initial[3]), (0.2 / x_initial[3]), initial_conditions[2] * (0.2 / x_initial[3]),
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / x_initial[3]), 3750.0, 54.75, 105.0, 100.0]

opt_func = OptimizationFunction(optimizer, AutoZygote())
opt_prob = OptimizationProblem(opt_func, x_initial, params; lb=lb, ub=ub)

sol = solve(opt_prob, BBO_adaptive_de_rand_1_bin_radiuslimited())

optimal_e0, optimal_D0, optimal_tau = sol.u
max_Gm_opt = -sol.objective

println("Optimum initial energy concentration: ", optimal_e0)
println("Optimum initial DNA concentration: ", optimal_D0)
println("Optimum dilution interval: ", optimal_tau)
println("Max GFP produced using these concentrations: ", max_Gm_opt)