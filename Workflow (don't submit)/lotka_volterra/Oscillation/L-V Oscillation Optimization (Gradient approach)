using Plots, DifferentialEquations, Optim, OptimizationOptimJL, Optimization, Zygote, SciMLSensitivity, LineSearches, FFTW, Statistics

function lotka_volterra(du, u, p, t)
    α, β, γ, δ = p
    x, y = u
    
    du[1] = α * x - β * x * y   # Prey population equation
    du[2] = -γ * y + δ * x * y  # Predator population equation
end

function oscillation_period(u, p)
    α, β, γ, δ = u
    x0, y0 = p[1:2]
    println("Evaluating at: α = $α, β = $β, γ = $γ, δ = $δ")

    tspan = (0, 100)

    ODEProb = ODEProblem(lotka_volterra, [x0, y0], tspan, [α, β, γ, δ])
    ODESol = solve(ODEProb, Tsit5())

    prey_vals = ODESol[1, :]

    peak_indices = findall(diff(sign.(diff(prey_vals))) .< 0) .+ 1
    peak_times = ODESol.t[peak_indices]  # Extract corresponding time values at the peaks
    peak_values = prey_vals[peak_indices]  # Extract prey population at the peaks
    
    if length(peak_times) > 1
        periods = diff(peak_times)
        avg_period = mean(periods)
    else
        avg_period = Inf # if no oscillations are found
    end

    println("Computed avg period: ", avg_period)

    # return "Peak times are: ", peak_times, " and the prey values at those times are: ", peak_values, " and the average time between the peaks is ", avg_period

    return abs(avg_period - p[3])
end

p_init = [5.0, 5.0, 10]  # Initial prey, predator, and desired period
u0_params = [0.5, 1.0, 3.0, 1.0]  # Initial α, β, γ, δ
lb_params = [0.01, 0.01, 0.01, 0.01] # lower bounds for parameters
ub_params = [2.0, 2.0, 5.0, 2.0]  # Upper bounds for parameters

opt_func = OptimizationFunction((u, p) -> oscillation_period(u, p), AutoForwardDiff())
opt_prob = OptimizationProblem(opt_func, u0_params, p_init; lb=lb_params, ub=ub_params)

sol = solve(opt_prob, Fminbox(LBFGS()))

println("Optimal parameters: α = $(sol.u[1]), β = $(sol.u[2]), γ = $(sol.u[3]), δ = $(sol.u[4])")
println("Optimized period: ", oscillation_period(sol.u, p_init))

sol.original

oscillation_period(u0_params, p_init)