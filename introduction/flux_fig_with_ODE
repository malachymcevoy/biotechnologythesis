using CSV, DataFrames, Plots, DifferentialEquations, DiffEqCallbacks
gr(fmt = :png, dpi = 300)

#region < Read and compile the flux ring CSV files >
flux_ring_paths = ["introduction/Chemostat_data/flux_ring$(i).csv" for i in 1:8]
flux_ring_data = [CSV.read(path, DataFrame, delim = '\t') for path in flux_ring_paths]

for (i, df) in enumerate(flux_ring_data)
    rename!(df, ncol(df) - 1 => "flux_ring$(i)_value", ncol(df) => "flux_ring$(i)_error")
end

function shift_down(df)
    new_row = DataFrame([(colname => 0.0) for colname in names(df)]...)
    return vcat(new_row, df)
end

flux_ring_data = [shift_down(df) for df in flux_ring_data]

flux_ring_last_twos = [df[:, end-1:end] for df in flux_ring_data]
combined_df = hcat(flux_ring_last_twos...)

#endregion

combined_df = select(combined_df, ["flux_ring1_value", "flux_ring1_error",
                                   "flux_ring3_value", "flux_ring3_error",
                                   "flux_ring5_value", "flux_ring5_error",
                                   "flux_ring7_value", "flux_ring7_error"])
constant = 714  # RFU to µM

flux_fig = plot(
    size = (1000, 700),
    left_margin = 5Plots.mm,
    bottom_margin = 5Plots.mm,
    guidefont = font(16, "Arial"),
    tickfont = font(12, "Arial"),
    legendfont = font(12, "Arial"),
    legend = true
)

for i in [3]
    values = combined_df[:, Symbol("flux_ring$(i)_value")] ./ constant
    errors = combined_df[:, Symbol("flux_ring$(i)_error")] ./ constant
    x_values = (0:length(values)-1) * 20 / 60
    scatter!(flux_fig, x_values, values, yerr = errors, label = "Microchemostat GFP Concentrations", markersize = 6, markerstrokewidth = 0.5)
end

xlabel!(flux_fig, "Time (hours)")
xlims!(0, 1000/60)  # or xlims!(0, 16.67)
ylabel!(flux_fig, "GFP concentration (µM)")

# --- ODE model ---
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0, 0.0, initial_conditions[2] * 0.0,
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0, 3750.0, 54.75, 105.0, 100.0]
f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, 20.0, 9.0, 0.0, 20.0, 100.0, 7.0

dilSpecs = (
            [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],    # DISC_A
            [1, 7],    [initial_conditions[1], 1.51],                           # DISC_B
            )


params_flat = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies])

function make_discrete_dilute!(dilSpecs)
    return function (integrator)
        p = integrator.p
        f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]

        for j in 1:Int(nspecies)
            integrator.u[j] *= (1.0 - f_V)
        end

        if integrator.t < s1 * 60
            for j in 1:length(dilSpecs[1])
                integrator.u[dilSpecs[1][j]] += f_V * dilSpecs[2][j]
            end
        else integrator.t >= s1 * 60 && integrator.t < s2 * 60
            for j in 1:length(dilSpecs[3])
                integrator.u[dilSpecs[3][j]] += f_V * dilSpecs[4][j]
            end
        end
    end
end

cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, false))

prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_flat)
sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb)

time_vals = sol.t / 60

# Superimpose ODE model on same plot
plot!(flux_fig, time_vals, sol[6, :], label = "Discrete ODE Model GFP concentration", linewidth = 2, color = :green)
plot!(legend=(.3,.2))

savefig(flux_fig, "flux_fig_with_ODE.png")