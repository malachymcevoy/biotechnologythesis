using DataFrames
using DifferentialEquations
using Plots

gr(fmt=:png, dpi=300)

# Define the ODE model
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    Din = t < 540 ? Din_init : 0.0

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e        # Energy 
    du[2] = Din - mu * D                                            # DNA
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m      # mRNA
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl          # Ribosome-mRNA complex (cl)
    du[5] = vtl - km * G - mu * G                                   # Inactive GFP
    du[6] = km * G - mu * Gm                                        # Active GFP
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R    # Ribosomes
end

# Define the initial species concentrations and parameters
initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, 33600.0 * (0.2 / 20.0), (0.2 / 20.0), 0.005 * (0.2 / 20.0),
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / 20.0), 3750.0, 54.75, 105.0, 100.0]

# Solve the system of ODEs using RadauIIA9
prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params)
sol = solve(prob, RadauIIA9(), saveat=1.0)

custom_colors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#17becf"]
time_vals = sol.t / 60  # Convert to hours
ODEfig = plot()
for i in 2:length(initial_conditions)
    plot!(ODEfig, time_vals, linewidth=2, sol[i, :], label="", color=custom_colors[i])
end
xlabel!("Time (hours)")
ylabel!("Concentration of molecules (ÂµM)")


savefig("cellfree_ODE_fig.png")