using DataFrames, DifferentialEquations, Optimization, OptimizationOptimJL, OptimizationBBO

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function gfp_production_rate(u, p)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u
    vtl = cl * (ktl / nG) * (e / (Ktl + e))
    return vtl
end

function optimizer(x, p)
    initial_conditions = [x[1], x[2], 0.0, 0.0, 0.0, 0.0, 1.51]
    params_base = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0,
                   0.0, initial_conditions[2] * 0.0,
                   1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
                   3750.0, 54.75, 105.0, 100.0]

    dilSpecs = (
        [1, 2, 7], [x[1], x[2], 1.51],
        [1, 7],    [x[1], 1.51],
        [1, 7],    [x[1], 1.51]
    )

    f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, 20.0, 9.0, 0.0, 20.0, 100.0, 7.0
    params_flat = vcat(params_base, [f_V, tau, s1, s2, tmax, tsave, nspecies])

    function make_discrete_dilute!(dilSpecs)
        return function (integrator)
            f_V, tau, s1, s2, _, _, nspecies = integrator.p[end-6:end]
            INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs
            for j in 1:Int(nspecies)
                integrator.u[j] *= (1.0 - f_V)
            end
            if integrator.t < s1 * 60
                for j in 1:length(INDEX_DISC_A)
                    integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
                end
            elseif integrator.t < s2 * 60
                for j in 1:length(INDEX_DISC_B)
                    integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
                end
            else
                for j in 1:length(INDEX_DISC_C)
                    integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
                end
            end
        end
    end

    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, false))
    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_flat)
    sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb)

    total_gfp_production = 0.0
    for i in 2:length(sol.t)
        dt = sol.t[i] - sol.t[i-1]
        production_rate = gfp_production_rate(sol.u[i-1], params_flat)
        total_gfp_production += production_rate * dt
    end
    return -total_gfp_production
end

# === Optimization Setup ===
initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0,
          0.0, initial_conditions[2] * 0.0,
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
          3750.0, 54.75, 105.0, 100.0]

x_initial = [50000.0, 0.02]
lb, ub = [1000.0, 0.001], [60000.0, 0.1]

opt_func = OptimizationFunction(optimizer, Optimization.AutoForwardDiff())
opt_prob = OptimizationProblem(opt_func, x_initial, params; lb=lb, ub=ub)

# Solve optimization problem with different algorithms
sol_BBO = solve(opt_prob, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_NM = solve(opt_prob, NelderMead())
sol_LBFGS = solve(opt_prob, LBFGS())
sol_IPN = solve(opt_prob, IPNewton())

# Extract and print results for each method
for (name, sol) in [("BBO", sol_BBO), ("Nelder-Mead", sol_NM), ("LBFGS", sol_LBFGS), ("IPNewton", sol_IPN)]
    println("[$name] Termination Status: ", sol.retcode)

    if !isnothing(sol.u)
        optimal_e0, optimal_D0 = sol.u
        println("[$name] Optimum initial energy concentration: ", optimal_e0)
        println("[$name] Optimum initial DNA concentration: ", optimal_D0)
    else
        println("[$name] No valid solution found.")
    end

    if !isnothing(sol.objective)
        println("[$name] Total GFP produced using these concentrations: ", -sol.objective)
    else
        println("[$name] Objective function value not available.")
    end
    
    println()
end