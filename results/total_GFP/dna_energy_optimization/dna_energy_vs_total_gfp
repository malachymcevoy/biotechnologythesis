using DataFrames, DifferentialEquations, CairoMakie, Colors

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    Din = t < 540 ? Din_init : 0.0

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e  # Energy balance
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function gfp_production_rate(u, p)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u
    vtl = cl * (ktl / nG) * (e / (Ktl + e))
    return vtl
end

# Parameters for the model
params = [2.0, 833.0, 4.0, 236.0, 1000.0, 0.2 / 20.0, 0.005 * (0.2 / 20.0), 
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / 20.0), 
          3750.0, 54.75, 105.0, 100.0]

energy_vals = range(1000.0, 60000.0, length=200)  # Energy concentration range
dna_vals = range(0.001, 0.05, length=200)        # DNA concentration range

# Initialize matrix to store GFP production for each pair of (e0, D0)
total_Gm_values = zeros(Float64, length(dna_vals), length(energy_vals))

# Iterate over each combination of DNA concentration (D0) and Energy concentration (e0)
for (i, e0) in enumerate(energy_vals)
    for (j, D0) in enumerate(dna_vals)
        initial_conditions = [e0, D0, 0.0, 0.0, 0.0, 0.0, 1.51]

        modified_params = copy(params)
        modified_params[5] = e0 * (0.2 / 20.0)  # Update energy-dependent parameters
        modified_params[7] = D0 * (0.2 / 20.0)  # Update DNA-dependent parameters
        
        # Define and solve the ODE problem
        prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), modified_params)
        sol = solve(prob, RadauIIA5(), saveat=1.0)

        # Calculate total GFP production by integrating GFP production rate
        total_gfp_production = 0.0
        for k in 2:length(sol.t)
            dt = sol.t[k] - sol.t[k-1]
            production_rate = gfp_production_rate(sol.u[k-1], modified_params)
            total_gfp_production += production_rate * dt
        end
        
        # Store the result in the appropriate position in the matrix
        total_Gm_values[j, i] = total_gfp_production
    end
end

# Create the figure and axis for plotting
f = Figure(resolution=(800, 600))
ax = Axis(f[1, 1], 
    title="Effect of DNA and energy concentration on Total GFP Production",
    xlabel="DNA Concentration (μM)", 
    ylabel="Energy Concentration (μM)",
    titlesize=14, xlabelsize=12, ylabelsize=12, xticklabelsize=10, yticklabelsize=10
)

# Create the heatmap using the values calculated
hm = heatmap!(ax, dna_vals, energy_vals, total_Gm_values'; colormap=:viridis)

# Add colorbar
Colorbar(f[1, 2], hm, label="Total GFP Output (μM)", labelsize=12, ticklabelsize=10)

# Save the figure as a PNG file
savefig("dna_energy_vs_total_gfp_heatmap.png")