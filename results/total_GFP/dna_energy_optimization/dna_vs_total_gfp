using DataFrames
using DifferentialEquations
using Plots

# Define the ODE model
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    Din = t < 540 ? Din_init : 0.0

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e  # Energy balance
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

# Function to calculate GFP production rate
function gfp_production_rate(u, p)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u
    vtl = cl * (ktl / nG) * (e / (Ktl + e))
    return vtl
end

# Initial conditions and parameters
initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * (0.2 / 20.0), (0.2 / 20.0), 0.005 * (0.2 / 20.0),
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / 20.0), 3750.0, 54.75, 105.0, 100.0]

# Range of initial energy values
e0_range = range(0.0, 60000.0, length=1000)

# Store total GFP values for each energy value
total_Gm_values = Float64[]

# Loop over the range of initial energy values
for e0 in e0_range
    # Set the initial energy concentration
    init_cond = copy(initial_conditions)
    init_cond[1] = e0

    # Update the parameter for the initial energy
    new_params = copy(params)
    new_params[5] = e0 * (0.2 / 20.0)

    # Define and solve the ODE problem
    prob = ODEProblem(model!, init_cond, (0.0, 1000.0), new_params)
    sol = solve(prob, RadauIIA5(), saveat=1.0)

    # Calculate total GFP produced by summing the GFP production rate over time
    total_gfp_production = 0.0
    for i in 2:length(sol.t)
        dt = sol.t[i] - sol.t[i-1]
        production_rate = gfp_production_rate(sol.u[i-1], new_params)
        total_gfp_production += production_rate * dt
    end

    # Store the result for the current initial energy value
    push!(total_Gm_values, total_gfp_production)
end

# Find the maximum total GFP production and the corresponding initial energy value
max_total_gfp = maximum(total_Gm_values)
max_index = argmax(total_Gm_values)
energy_at_max_gfp = e0_range[max_index]

# Print the results
println("Energy value for maximum total GFP production: $(energy_at_max_gfp) µM")
println("Maximum total GFP produced: $(max_total_gfp) μM•h")

# Plot the results
GFP_vs_energy_fig = plot(e0_range, total_Gm_values, label="Total GFP Produced",
                         xlabel="Initial Energy Concentration (μM)",
                         ylabel="Total GFP Production (μM•h)",
                         title="Total GFP Production vs Initial Energy",
                         linewidth=2, legend=:topleft)

# Save the plot
savefig("energy_vs_total_gfp.png")