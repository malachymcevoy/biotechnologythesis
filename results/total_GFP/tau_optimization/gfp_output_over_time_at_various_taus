using DifferentialEquations, DiffEqCallbacks, Plots
gr(fmt=:png, dpi=300)

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function gfp_production_rate(u, p)
    _, ng, _, nG, _, _, _, _, _, _, _, _, _, _, _, Ktl = p[1:16]
    cl = u[4]
    e  = u[1]
    ktl = p[15]
    return cl * (ktl / nG) * (e / (Ktl + e))
end

function make_discrete_dilute!(dilSpecs)
return function (integrator)
    p = integrator.p
    f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
    INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

    for j in 1:Int(nspecies)
        integrator.u[j] *= (1.0 - f_V)
    end

    if integrator.t < s1 * 60
        for j in 1:length(INDEX_DISC_A)
            integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
        end
    elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
        for j in 1:length(INDEX_DISC_B)
            integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
        end
    else
        for j in 1:length(INDEX_DISC_C)
            integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
        end
    end
end
end

# === Setup ===
initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params_base = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0,
               0.0, initial_conditions[2] * 0.0,
               1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
               3750.0, 54.75, 105.0, 100.0]
f_V = 0.2
s1, s2, tmax, tsave, nspecies = 9.0, 0.0, 20.0, 100.0, 7
tau_values = [5, 10, 20, 40, 80]


# === Plot GFP at various taus ===
GFP_plot = plot()
for tau in tau_values
    dilSpecs = (
        [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],       # DISC_A
        [1, 7],    [initial_conditions[1], 1.51],                              # DISC_B
        [1, 7],    [initial_conditions[1], 1.51]                               # DISC_C
    )

    # Do not include dilSpecs in the parameter vector
    params_with_dilution = vcat(params_base, [f_V, tau, s1, s2, tmax, 0.0, nspecies])

    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, false))

    prob = ODEProblem(model!, initial_conditions, (0.0, 2000.0), params_with_dilution)
    sol = solve(prob, RadauIIA5(), callback=cb, saveat=1.0)

    time_vals = sol.t ./ 60
    plot!(GFP_plot, time_vals, sol[6, :], label="τ = $tau", lw=2)

    function compute_total_gfp(sol, params)
        total_gfp_production = 0.0
        for i in 2:length(sol.t)
            dt = sol.t[i] - sol.t[i-1]
            rate = gfp_production_rate(sol.u[i-1], params)
            total_gfp_production += rate * dt
        end
        return total_gfp_production
    end

    total_gfp = compute_total_gfp(sol, params_with_dilution)
    println("Total GFP produced at tau = $tau min: ", total_gfp)
end

xlabel!("Time (hours)")
ylabel!("GFP Concentration (μM)")
title!("GFP Output at Different Dilution Intervals (τ)")
savefig("gfp_output_over_time_at_various_taus.png")

savefig("gfp_output_over_time_at_various_taus")