using DataFrames, DifferentialEquations, Plots

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function gfp_production_rate(u, p)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u
    vtl = cl * (ktl / nG) * (e / (Ktl + e))
    return vtl
end

function make_discrete_dilute!(dilSpecs)
    return function (integrator)
        p = integrator.p
        f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
        INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

        for j in 1:Int(nspecies)
            integrator.u[j] *= (1.0 - f_V)
        end

        if integrator.t < s1 * 60
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
            end
        elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        else
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end
end

# === Setup ===
initial_conditions = [60000.0, 0.02, 0.0, 0.0, 0.0, 0.0, 1.51]
params_base = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0,
               0.0, initial_conditions[2] * 0.0,
               1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
               3750.0, 54.75, 105.0, 100.0]

tau_range = 10.0:10.0:1000.0
total_Gm_values = Float64[]

f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, 20.0, 9.0, 0.0, 20.0, 100.0, 7.0

for tau_vals in tau_range  
    dilSpecs = (
        [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],       # DISC_A
        [1, 7],    [initial_conditions[1], 1.51],                              # DISC_B
        [1, 7],    [initial_conditions[1], 1.51]                               # DISC_C
    )

    params_flat = vcat(params_base, [f_V, tau_vals, s1, s2, tmax, tsave, nspecies])

    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau_vals; save_positions=(false, false))

    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_flat)
    sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb)

    total_gfp_production = 0.0
    for i in 2:length(sol.t)
        dt = sol.t[i] - sol.t[i-1]
        production_rate = gfp_production_rate(sol.u[i-1], modified_parameters)
        total_gfp_production += production_rate * dt
    end

    push!(total_Gm_values, total_gfp_production)
end

max_total_gfp = maximum(total_Gm_values)
max_index = argmax(total_Gm_values)
tau_at_max_gfp = tau_range[max_index]

println("Optimal dilution interval (τ): ", tau_at_max_gfp, " minutes")
println("Maximum total GFP produced: ", max_total_gfp)

plot(tau_vals, total_Gm_values, xlabel="Dilution Interval (minutes)", ylabel="Total GFP Production (µM)",
     title="Effect of Dilution Interval on Total GFP Production", lw=2, legend=false)

savefig("tau_effect_on_total_gfp.png")