using DataFrames, DifferentialEquations, Plots, Optimization, OptimizationOptimJL, OptimizationBBO, Zygote

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    Din = t < 540 ? Din_init : 0.0

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function optimize_initial_energy(e0, p)
    init_cond = copy(initial_conditions)
    init_cond[1] = e0[1]
    updated_params = copy(p)
    updated_params[5] = e0[1] * (0.2 / 20.0)

    prob = ODEProblem(model!, init_cond, (0.0, 1000.0), updated_params)
    sol = solve(prob, RadauIIA5(), saveat=1.0)

    max_Gm = maximum(sol[6, :])
    return -max_Gm
end

initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]  # e0 is now the variable we optimize
params = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * (0.2 / 20.0), (0.2 / 20.0), 0.005 * (0.2 / 20.0),
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / 20.0), 3750.0, 54.75, 105.0, 100.0]

e0_initial = [33600.0]  # Initial guess for initial energy concentration
lb, ub = [1000.0], [60000.0]

opt_func = OptimizationFunction(optimize_initial_energy, Optimization.AutoForwardDiff())
opt_prob = OptimizationProblem(opt_func, e0_initial, params; lb=lb, ub=ub)
sol = solve(opt_prob, BBO_adaptive_de_rand_1_bin_radiuslimited())

optimal_e0 = sol.u[1]
max_Gm_opt = -sol.objective

println("Optimum initial energy concentration: ", optimal_e0)
println("Max GFP produced using this energy concentration: ", max_Gm_opt)

#region < Solve ODE with Optimal Energy Concentration & Plot Results >
optimal_initial_conditions = copy(initial_conditions)
optimal_initial_conditions[1] = optimal_e0

tspan = (0.0, 1000.0)
prob_opt = ODEProblem(model!, optimal_initial_conditions, tspan, params)
sol_opt = solve(prob_opt, RadauIIA5(), saveat=1.0)

time_vals = sol_opt.t / 60
GFP_vals = sol_opt[6, :]

max_Gm = maximum(GFP_vals)
max_Gm_time_index = argmax(GFP_vals)
max_Gm_time = time_vals[max_Gm_time_index]

# Plot GFP concentration over time
GFP_fig = plot(time_vals, GFP_vals, label="GFP (Gm)", xlabel="Time (hours)", 
               ylabel="GFP Concentration (Î¼M)", title="GFP Production with optimized initial energy",
               linewidth=2, legend=:topright)

display(scatter!([max_Gm_time], [max_Gm], markershape=:circle, color=:red, label="Max GFP"))
#endregion