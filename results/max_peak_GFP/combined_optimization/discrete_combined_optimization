using DataFrames, DifferentialEquations, Plots, Optimization, OptimizationOptimJL, Zygote, DiffEqCallbacks, SciMLSensitivity, OptimizationBBO

# Define the model
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function optimize_dilution_rate(x, p)
    initial_conditions = [x[2], x[3], 0.0, 0.0, 0.0, 0.0, 1.51]
    params = [2.0, 833.0, 4.0, 236.0, x[2] * 0.0, 0.0, x[3] * 0.0, 1000.0, 1.0, 0.038153465, 
    0.084, 1.51 * 0.0, 3750.0, 54.75, 105.0, 100.0]
    
    u0 = initial_conditions
    idx_e, idx_D_G, idx_m_G, idx_cl_G, idx_G, idx_G_m, idx_R = 1, 2, 3, 4, 5, 6, 7
    
    INDEX_DISC_A = [idx_e, idx_D_G, idx_R]
    CONC_DISC_A = [u0[1], u0[2], u0[7]]
    INDEX_DISC_B = [idx_e, idx_R]
    CONC_DISC_B = [u0[1], u0[7]]
    INDEX_DISC_C = [idx_e, idx_R]
    CONC_DISC_C = [u0[1], u0[7]]
    INDEX_CONT = [14, 15, 16]
    CONC_CONT_A = [x[2], 0.0, 1.51]
    CONC_CONT_B = [x[2], 0.0, 1.51]
    dilSpecs = (INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C, INDEX_CONT, CONC_CONT_A, CONC_CONT_B)
    
    function discreteDilute!(integrator)
        p = integrator.p
        f_V = p[end - 6]
        tau = p[end - 5]
        s1 = p[end - 4]
        s2 = p[end - 3]
        tmax = p[end - 2]
        tsave = p[end - 1]
        nspecies = p[end]    
        if integrator.t < s1 * 60.0
            for j in 1:7
                integrator.u[j] *= (1.0 - f_V)
            end
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
            end
        elseif s1 * 60 <= integrator.t < s2 * 60.0
            for j in 1:7
                integrator.u[j] *= (1.0 - f_V)
            end
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        else
            for j in 1:7
                integrator.u[j] *= (1.0 - f_V)
            end
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end
    
    f_V = 0.2
    tau, s1, s2, tmax, tsave, nspecies = x[1], 9.0, 0.0, 20.0, 100.0, 7
    params_with_dilution = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies, dilSpecs])
    
    function get_callback(tau)
        return PeriodicCallback(discreteDilute!, value(tau); save_positions=(false, false))
    end

    periodcb = PeriodicCallback(discreteDilute!, tau; save_positions=(false,false))
    cb = CallbackSet(periodcb)

    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_with_dilution)
    sol = solve(prob, RadauIIA5(), callback=periodcb, saveat=1.0)
    
    max_Gm = maximum(sol[6, :])
    
    return -max_Gm
end

x_initial = [20.0, 33600.0, 0.015]
lb, ub = [10.0, 1000.0, 0.001], [150.0, 60000.0, 0.02]

opt_func = OptimizationFunction(optimize_dilution_rate, AutoForwardDiff())
opt_prob = OptimizationProblem(opt_func, x_initial; lb=lb, ub=ub)

sol_BBO = solve(opt_prob, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_LBFGS = solve(opt_prob, LBFGS())
sol_NM = solve(opt_prob, NelderMead())
sol_IPN = solve(opt_prob, IPNewton())

optimal_tau_BBO, optimal_e0_BBO, optimal_D0_BBO = sol_BBO.u
max_Gm_opt_BBO = -sol_BBO.objective

optimal_tau_LBFGS, optimal_e0_LBFGS, optimal_D0_LBFGS = sol_LBFGS.u
max_Gm_opt_LBFGS = -sol_LBFGS.objective

optimal_tau_NM, optimal_e0_NM, optimal_D0_NM = sol_NM.u
max_Gm_opt_NM = -sol_NM.objective

optimal_tau_IPN, optimal_e0_IPN, optimal_D0_IPN = sol_IPN.u
max_Gm_opt_IPN = -sol_IPN.objective

println("BBO:")
println("  Optimal initial energy concentration (e₀): ", optimal_e0_BBO)
println("  Optimal initial DNA concentration (D₀): ", optimal_D0_BBO)
println("  Optimal dilution interval (τ): ", optimal_tau_BBO)
println("  Maximum GFP produced: ", max_Gm_opt_BBO)

println("LBFGS:")
println("  Optimal initial energy concentration (e₀): ", optimal_e0_LBFGS)
println("  Optimal initial DNA concentration (D₀): ", optimal_D0_LBFGS)
println("  Optimal dilution interval (τ): ", optimal_tau_LBFGS)
println("  Maximum GFP produced: ", max_Gm_opt_LBFGS)

println("Nelder-Mead:")
println("  Optimal initial energy concentration (e₀): ", optimal_e0_NM)
println("  Optimal initial DNA concentration (D₀): ", optimal_D0_NM)
println("  Optimal dilution interval (τ): ", optimal_tau_NM)
println("  Maximum GFP produced: ", max_Gm_opt_NM)

println("IPNewton:")
println("  Optimal initial energy concentration (e₀): ", optimal_e0_IPN)
println("  Optimal initial DNA concentration (D₀): ", optimal_D0_IPN)
println("  Optimal dilution interval (τ): ", optimal_tau_IPN)
println("  Maximum GFP produced: ", max_Gm_opt_IPN)