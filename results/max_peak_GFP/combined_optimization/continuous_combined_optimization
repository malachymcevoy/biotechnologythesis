using DataFrames, DifferentialEquations, Optimization, OptimizationOptimJL, SciMLSensitivity, OptimizationBBO, ForwardDiff, Zygote

# Define the model
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    Din = t < 540 ? Din_init : 0.0

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function optimizer(x, p)
    init_cond = [x[1], x[2], 0.0, 0.0, 0.0, 0.0, 1.51]

    params = [2.0, 833.0, 4.0, 236.0, x[1] * (0.2 / x[3]), (0.2 / x[3]), x[2] * (0.2 / x[3]),
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / x[3]), 3750.0, 54.75, 105.0, 100.0]

    prob = ODEProblem(model!, init_cond, (0.0, 1000.0), params)
    sol = solve(prob, RadauIIA5(), saveat=1.0)

    max_Gm = maximum(sol[6, :])
    return -max_Gm
end

x_initial = [33600.0, 0.015, 20.0]
lb, ub = [1000.0, 0.001, 10.0], [60000.0, 0.02, 200.0]

# Configure optimization function
opt_func = OptimizationFunction(optimizer, AutoForwardDiff())
opt_prob = OptimizationProblem(opt_func, x_initial, lb=lb, ub=ub)

sol_BBO = solve(opt_prob, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_LBFGS = solve(opt_prob, LBFGS())
sol_NM = solve(opt_prob, NelderMead())
sol_IPN = solve(opt_prob, IPNewton())

optimal_e0_BBO, optimal_D0_BBO, optimal_tau_BBO = sol_BBO.u
max_Gm_opt_BBO = -sol_BBO.objective

optimal_e0_LBFGS, optimal_D0_LBFGS, optimal_tau_LBFGS = sol_LBFGS.u
max_Gm_opt_LBFGS = -sol_LBFGS.objective

optimal_e0_NM, optimal_D0_NM, optimal_tau_NM = sol_NM.u
max_Gm_opt_NM = -sol_NM.objective

optimal_e0_IPN, optimal_D0_IPN, optimal_tau_IPN = sol_IPN.u
max_Gm_opt_IPN = -sol_IPN.objective

println("BBO:")
println("  Optimal initial energy concentration (e₀): ", optimal_e0_BBO)
println("  Optimal initial DNA concentration (D₀): ", optimal_D0_BBO)
println("  Optimal dilution interval (τ): ", optimal_tau_BBO)
println("  Maximum GFP produced: ", max_Gm_opt_BBO)

println("LBFGS:")
println("  Optimal initial energy concentration (e₀): ", optimal_e0_LBFGS)
println("  Optimal initial DNA concentration (D₀): ", optimal_D0_LBFGS)
println("  Optimal dilution interval (τ): ", optimal_tau_LBFGS)
println("  Maximum GFP produced: ", max_Gm_opt_LBFGS)

println("Nelder-Mead:")
println("  Optimal initial energy concentration (e₀): ", optimal_e0_NM)
println("  Optimal initial DNA concentration (D₀): ", optimal_D0_NM)
println("  Optimal dilution interval (τ): ", optimal_tau_NM)
println("  Maximum GFP produced: ", max_Gm_opt_NM)

println("IPNewton:")
println("  Optimal initial energy concentration (e₀): ", optimal_e0_IPN)
println("  Optimal initial DNA concentration (D₀): ", optimal_D0_IPN)
println("  Optimal dilution interval (τ): ", optimal_tau_IPN)
println("  Maximum GFP produced: ", max_Gm_opt_IPN)
