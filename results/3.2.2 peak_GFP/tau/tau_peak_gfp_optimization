using DataFrames, DifferentialEquations, Optimization, OptimizationOptimJL, OptimizationBBO, DifferentiationInterface
using ForwardDiff: value

# === ODE Model ===
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

# === Objective Function ===
function optimizer(x, p)
    initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
    params_base = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0,
                   0.0, initial_conditions[2] * 0.0,
                   1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
                   3750.0, 54.75, 105.0, 100.0]

    dilSpecs = (
        [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],
        [1, 7],    [initial_conditions[1], 1.51],
        [1, 7],    [initial_conditions[1], 1.51]
    )

    f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, x[1], 9.0, 0.0, 20.0, 100.0, 7.0
    params_flat = vcat(params_base, [f_V, tau, s1, s2, tmax, tsave, nspecies])

    # === Safe Periodic Callback ===
    function make_discrete_dilute!(dilSpecs)
        return function (integrator)
            p = integrator.p
            f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
            INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

            nspecies_int = floor(Int, value(nspecies))
            t_now = value(integrator.t)
            s1_sec = value(s1) * 60
            s2_sec = value(s2) * 60

            for j in 1:nspecies_int
                integrator.u[j] *= (1.0 - value(f_V))
            end

            if t_now < s1_sec
                for j in 1:length(INDEX_DISC_A)
                    integrator.u[INDEX_DISC_A[j]] += value(f_V) * CONC_DISC_A[j]
                end
            elseif t_now < s2_sec
                for j in 1:length(INDEX_DISC_B)
                    integrator.u[INDEX_DISC_B[j]] += value(f_V) * CONC_DISC_B[j]
                end
            else
                for j in 1:length(INDEX_DISC_C)
                    integrator.u[INDEX_DISC_C[j]] += value(f_V) * CONC_DISC_C[j]
                end
            end
        end
    end

    tau_val = value(tau)  # Safely extract Float64 from Dual
    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau_val; save_positions=(false, false))

    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_flat)
    sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb)

    peak_gfp = maximum(sol[6, :])
    return -peak_gfp
end

# === Setup & Optimization ===
initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0,
          0.0, initial_conditions[2] * 0.0,
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
          3750.0, 54.75, 105.0, 100.0]

x_initial = [20.0]
lb, ub = [1.0], [120.0]

opt_func = OptimizationFunction(optimizer, Optimization.AutoForwardDiff())
opt_prob = OptimizationProblem(opt_func, x_initial, params; lb=lb, ub=ub)

opt_func_ipn = OptimizationFunction(optimizer, SecondOrder(AutoForwardDiff(), AutoForwardDiff()))
opt_prob_ipn = OptimizationProblem(opt_func_ipn, x_initial, params; lb=lb, ub=ub)

# === Solvers ===
sol_BBO = solve(opt_prob, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_NM = solve(opt_prob, NelderMead())
sol_LBFGS = solve(opt_prob, LBFGS())
# sol_IPN = solve(opt_prob_ipn, IPNewton())

# === Results ===
for (name, sol) in [("BBO", sol_BBO), ("Nelder-Mead", sol_NM), ("LBFGS", sol_LBFGS)]
    println("[$name] Termination Status: ", sol.retcode)

    if !isnothing(sol.u)
        println("[$name] Optimum dilution interval Ï„: ", sol.u)
    else
        println("[$name] No valid solution found.")
    end

    if !isnothing(sol.objective)
        println("[$name] Peak GFP produced using these concentrations: ", -sol.objective)
    else
        println("[$name] Objective function value not available.")
    end

    println()
end