using DataFrames, DifferentialEquations, Plots, Optimization, OptimizationOptimJL, OptimizationBBO, Zygote

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function make_discrete_dilute!(dilSpecs)
    return function (integrator)
        p = integrator.p
        f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
        INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

        for j in 1:Int(nspecies)
            integrator.u[j] *= (1.0 - f_V)
        end

        if integrator.t < s1 * 60
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
            end
        elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        else
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end
end

initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0,
               0.0, initial_conditions[2] * 0.0,
               1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
               3750.0, 54.75, 105.0, 100.0]
f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, 20.0, 9.0, 0.0, 20.0, 100.0, 7.0


e0_range = range(0.0, 60000.0, length=1000)
peak_Gm_values = Float64[]

for e0 in e0_range
    init_cond = copy(initial_conditions)
    init_cond[1] = e0  # Set new initial energy concentration
    
    new_params = copy(params)
    new_params[5] = e0 * 0.0  # Update parameters with new ein value

    dilSpecs = (
        [1, 2, 7], [e0, init_cond[2], 1.51],    # DISC_A
        [1, 7],    [e0, 1.51],           # DISC_B
        [1, 7],    [e0, 1.51]            # DISC_C
    )

    params_flat = vcat(new_params, [f_V, tau, s1, s2, tmax, tsave, nspecies])
    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, false))

    prob = ODEProblem(model!, init_cond, (0.0, 1000.0), params_flat)
    sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb)

    push!(peak_Gm_values, maximum(sol[6, :])) # Extract and store the max GFP value
end

# === Analyze and plot results ===
max_peak_gfp = maximum(peak_Gm_values)
max_index = argmax(peak_Gm_values)
energy_at_max_peak_gfp = e0_range[max_index]

println("Energy concentration for maximum peak GFP production : $energy_at_max_peak_gfp µM")
println("Maximum peak GFP produced : $max_peak_gfp µM")

GFP_vs_energy_fig = plot(e0_range, peak_Gm_values, label="Max GFP Produced",
                         xlabel="Initial Energy Concentration (μM)",
                         ylabel="Max GFP (μM)",
                         title="GFP Production vs Initial Energy",
                         linewidth=2, legend=:bottomright)

scatter!([energy_at_max_peak_gfp], [max_peak_gfp], label="Max", marker=:star5, color=:red)

savefig("energy_vs_peak_gfp.png")