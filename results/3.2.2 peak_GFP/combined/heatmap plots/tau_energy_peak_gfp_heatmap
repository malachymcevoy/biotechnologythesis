using DataFrames, DifferentialEquations, CairoMakie, Colors
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u
    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))
    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function make_discrete_dilute!(dilSpecs)
    return function (integrator)
        p = integrator.p
        f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
        INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs
        for j in 1:Int(nspecies)
            integrator.u[j] *= (1.0 - f_V)
        end
        if integrator.t < s1 * 60
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
            end
        elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        else
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end
end

params = [2.0, 833.0, 4.0, 236.0, 0.0, 0.0, 0.0,
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
          3750.0, 54.75, 105.0, 100.0]

energy_vals = range(1000.0, 60000.0, length=100)
tau_vals = range(5.0, 120.0, length=100)
peak_Gm_values = zeros(Float64, length(tau_vals), length(energy_vals))

for (i, e0) in enumerate(energy_vals)
    for (j, tau) in enumerate(tau_vals)
        initial_conditions = [e0, 0.002075, 0.0, 0.0, 0.0, 0.0, 1.51] # DNA at 0.002075 === !!!!!!!!
        f_V, s1, s2, tmax, tsave, nspecies = 0.2, 9.0, 0.0, 20.0, 100.0, 7.0

        dilSpecs = (
            [1, 2, 7], [e0, initial_conditions[2], 1.51], # DISC_A
            [1, 7], [e0, 1.51], # DISC_B
            [1, 7], [e0, 1.51] # DISC_C
        )
        params_flat = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies])
        cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, false))
        prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_flat)
        sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb)
        # Store maximum GFP output
        peak_Gm_values[j, i] = maximum(sol[6, :])
    end
end

max_idx = argmax(peak_Gm_values)
j_max, i_max = Tuple(CartesianIndices(peak_Gm_values)[max_idx])
opt_tau = tau_vals[j_max]
opt_energy = energy_vals[i_max]
opt_gfp = peak_Gm_values[j_max, i_max]

println("Optimal tau : $(opt_tau) μM")
println("Optimal Energy concentration: $(opt_energy) μM")
println("Maximum Peak GFP Production: $(round(opt_gfp, digits=2)) μM")

f = Figure(resolution=(900, 650))
ax = Axis(f[1, 1],
    xlabel="Dilution interval (min)",
    ylabel="Energy Concentration (μM)",
    xlabelsize=18, ylabelsize=18, 
    xticklabelsize=15, yticklabelsize=15,
)

hm = heatmap!(ax, tau_vals, energy_vals, peak_Gm_values'; colormap=:viridis)

levels = range(minimum(peak_Gm_values), maximum(peak_Gm_values), length=15)
contour!(ax, tau_vals, energy_vals, peak_Gm_values, 
         levels=levels, 
         linewidth=1.5,
         color=:white)

scatter!(ax, [opt_tau], [opt_energy], color=:red, markersize=15, marker=:star5)
text!(ax, "Max GFP: $(round(opt_gfp, digits=2)) μM", 
      position=(opt_tau - 22.5, opt_energy - 2000), # Shifted down by 2000 units
      align=(:left, :center), 
      fontsize=18, 
      color=:red,
      font=:bold)

Colorbar(f[1, 2], hm, 
         label="Peak GFP Concentration (μM)", 
         labelsize=18, 
         ticklabelsize=15)

display(f)
CairoMakie.save("tau_energy_peak_gfp_heatmap.png", f)