using Plots, DifferentialEquations, Optim, OptimizationOptimJL, Optimization, Zygote, SciMLSensitivity, LineSearches, OptimizationBBO

function lotka_volterra(du, u, p, t)
    α, β, γ, δ = p
    x, y = u
    du[1] = α * x - β * x * y   # Prey population equation
    du[2] = -γ * y + δ * x * y  # Predator population equation
end

#region <<< Prey birth rate optimization >>>
function h(u,p)
	α = u[1] # Optimization variable (α population)
	β, γ, δ = p[1:3]
	x0 = p[4]
	y0 = p[5]
	tspan = (0.0, 100.0)

	u0 = [x0, y0]
	
	#solve the ODE
	prob = ODEProblem(lotka_volterra, u0, tspan, [α, β, γ, δ]; isoutofdomain=(u, p, t) -> any(x -> x < 0, u))
	sol = solve(prob, Tsit5())

	#extract the peak prey population
	peak_prey = maximum(sol[1, :])

	# the function needs to return the peak prey
	return -peak_prey
end

# define parameters
p_α = [1.0, 3.0, 1.0, 5.0, 5.0] # β, γ, δ, prey_init, pred_init
u0_α = [1.0]
lb_α = [0.0]
ub_α = [3.0]

opt_func_α = OptimizationFunction(h, AutoZygote())
opt_prob_α = OptimizationProblem(opt_func_α, u0_α, p_α; lb=lb_α, ub=ub_α)

opt_func_α_ipn = OptimizationFunction(h, AutoForwardDiff())
opt_prob_α_ipn = OptimizationProblem(opt_func_α, u0_α, p_α; lb=lb_α, ub=ub_α)

# Solve with different optimization algorithms
sol_BBO_α = solve(opt_prob_α, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_NM_α = solve(opt_prob_α, NelderMead())
sol_LBFGS_α = solve(opt_prob_α, LBFGS())
sol_IPN_α = solve(opt_prob_α_ipn, IPNewton())
#endregion

#region <<< Predator birth rate optimization >>>
function f(u,p)
	δ = u[1] # Optimization variable (δ population)
	α, β, γ = p[1:3]
	x0 = p[4]
	y0 = p[5]
	tspan = (0.0, 100.0)

	u0 = [x0, y0]
	
	#solve the ODE
	prob = ODEProblem(lotka_volterra, u0, tspan, [α, β, γ, δ]; isoutofdomain=(u, p, t) -> any(x -> x < 0, u))
	sol = solve(prob, Tsit5())

	#extract the peak predator population
	peak_pred = maximum(sol[2, :])

	# the function needs to return the peak predator
	return -peak_pred
end

# define parameters
p_δ = [0.5, 1.0, 3.0, 5.0, 5.0] # α, β, γ, prey_init, pred_init
u0_δ = [1.0]
lb_δ = [0.0]
ub_δ = [3.0]

opt_func_δ = OptimizationFunction(f, AutoZygote())
opt_prob_δ = OptimizationProblem(opt_func_δ, u0_δ, p_δ; lb=lb_δ, ub=ub_δ)

opt_func_δ_ipn = OptimizationFunction(f, AutoForwardDiff())
opt_prob_δ_ipn = OptimizationProblem(opt_func_δ, u0_δ, p_δ; lb=lb_δ, ub=ub_δ)

# Solve with different optimization algorithms
sol_BBO_δ = solve(opt_prob_δ, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_NM_δ = solve(opt_prob_δ, NelderMead())
sol_LBFGS_δ = solve(opt_prob_δ, LBFGS())
sol_IPN_δ = solve(opt_prob_δ_ipn, IPNewton())
#endregion

#region <<< Print results >>>
# Print results for Prey optimization
println("Prey Optimization Results:")
println("BBO_adaptive_de_rand_1_bin_radiuslimited: Optimal α = ", sol_BBO_α.u[1], ", Peak Prey Population = ", -sol_BBO_α.minimum)
println("NelderMead: Optimal α = ", sol_NM_α.u[1], ", Peak Prey Population = ", -sol_NM_α.minimum)
println("LBFGS: Optimal α = ", sol_LBFGS_α.u[1], ", Peak Prey Population = ", -sol_LBFGS_α.minimum)
println("IPNewton: Optimal α = ", sol_IPN_α.u[1], ", Peak Prey Population = ", -sol_IPN_α.minimum)

# Print results for Predator optimization
println("\nPredator Optimization Results:")
println("BBO_adaptive_de_rand_1_bin_radiuslimited: Optimal δ = ", sol_BBO_δ.u[1], ", Peak Predator Population = ", -sol_BBO_δ.minimum)
println("NelderMead: Optimal δ = ", sol_NM_δ.u[1], ", Peak Predator Population = ", -sol_NM_δ.minimum)
println("LBFGS: Optimal δ = ", sol_LBFGS_δ.u[1], ", Peak Predator Population = ", -sol_LBFGS_δ.minimum)
println("IPNewton: Optimal δ = ", sol_IPN_δ.u[1], ", Peak Predator Population = ", -sol_IPN_δ.minimum)
#endregion