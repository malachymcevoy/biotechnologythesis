using Plots, DifferentialEquations, Optim, OptimizationOptimJL, Optimization, Zygote, SciMLSensitivity, LineSearches

# create the lotka_volterra function
function lotka_volterra(du, u, p, t)
    α, β, γ, δ = p
    x, y = u
    du[1] = α * x - β * x * y   # Prey population equation
    du[2] = -γ * y + δ * x * y  # Predator population equation
end

#region <<< Initial population work >>>


"""
####################################################################################
# Optimization of peak prey population with respect to the initial prey population #
####################################################################################

function f(u,p)
	α, β, γ, δ = p
	x0 = u[1] # This is the optimization variable (initial prey population)
	y0 = p[5] # this is the fixed initial predator population
	tspan = (0.0, 50.0) # the time span for the simulation

	# Define the initial conditions
	u0 = [x0, y0]
	
	#solve the ODE
	prob = ODEProblem(lotka_volterra, u0, tspan, p[1:4])
	sol = solve(prob, Tsit5())

	#extract the peak prey population
	peak_prey = maximum(sol[1, :])

	# the function needs to return the peak prey
	return -peak_prey
end

p_prey = [.5, 1.0, 3.0, 1.0, 1.0] # α, β, γ, δ, y0 (initial predator population)
u0_prey = [5.0]
lb_prey = [0.1]
ub_prey = [50.0]

opt_func_prey = OptimizationFunction(f, AutoZygote())
opt_prob_prey = OptimizationProblem(opt_func_prey, u0_prey, p_prey; lb=lb_prey, ub=ub_prey)

sol_prey = solve(opt_prob_prey, NelderMead())

# Print results
println("Optimal Initial Prey Population: ", sol_prey.u[1])
println("Maximum Peak Prey Population: ", -sol_prey.minimum)


############################################################################################
# Optimization of peak predator population with respect to the initial predator population #
############################################################################################

function g(u,p)
	α, β, γ, δ = p
	x0 = u[1] # This is the optimization variable (initial predator population)
	y0 = p[5] # this is the fixed initial predator population
	tspan = (0.0, 50.0) # the time span for the simulation

	# Define the initial conditions

	u0 = [x0, y0]
	
	#solve the ODE
	prob = ODEProblem(lotka_volterra, u0, tspan, p[1:4])
	sol = solve(prob, Tsit5())

	#extract the peak prey population
	peak_predator = maximum(sol[2, :])

	# the function needs to return the peak prey
	return -peak_predator
end

p_pred = [.5, 1.0, 3.0, 1.0, 5.0] # α, β, γ, δ, x0 (initial prey population)
u0_pred = [5.0]
lb_pred = [0.1]
ub_pred = [50.0]

opt_func_pred = OptimizationFunction(g, AutoZygote())
opt_prob_pred = OptimizationProblem(opt_func_pred, u0_pred, p_pred; lb=lb_pred, ub=ub_pred)

sol_pred = solve(opt_prob_pred, NelderMead())

println("Optimal Initial Predator Population: ", sol_pred.u[1])
println("Maximum Peak Predator Population: ", -sol_pred.minimum)


"""

#endregion

#region <<< Optimization of prey birthrate α >>>

# create an optimisation function for prey birthrate
function h(u,p)
	α = u[1]
	β, γ, δ = p[1:3]
	x0 = p[4] # This is the optimization variable (α population)
	y0 = p[5] # this is the fixed initial predator population
	tspan = (0.0, 50.0) # the time span for the simulation

	u0 = [x0, y0]
	
	#solve the ODE
	prob = ODEProblem(lotka_volterra, u0, tspan, [α, β, γ, δ])
	sol = solve(prob)

	#extract the peak prey population
	peak_prey = maximum(sol[1, :])

	# the function needs to return the peak prey
	return -peak_prey
end

# define parameters
p_α = [1.0, 3.0, 1.0, 5, 5] # β, γ, δ, prey_init, pred_init
u0_α = [1.0]
lb_α = [0.25]
ub_α = [3.0]

#region <<<LBFGS approach>>>
opt_func_α = OptimizationFunction(h, AutoZygote())
opt_prob_α = OptimizationProblem(opt_func_α, u0_α, p_α; lb=lb_α, ub=ub_α)

sol_α = solve(opt_prob_α, LBFGS(); g_tol=1e-10)

#endregion

#region <<<Newton's Method approach >>>
"""opt_func_α = OptimizationFunction(h, AutoZygote())
prob_func_α = OptimizationProblem(opt_func_α, u0_α, p_α)
sol_α = solve(prob_func_α, Newton())"""


#endregion

println("By optimizing α within a domain of ", lb_α, " and ", ub_α, " the optimal prey birthrate is ", sol_α.u[1], " and the maximum peak prey population using this parameter is ", -sol_α.minimum, ".")

println(sol_α.original)
#endregion
