using DataFrames, DifferentialEquations, Plots, DiffEqCallbacks, DifferentiationInterface
using Optimization, OptimizationOptimJL, OptimizationBBO
using ForwardDiff

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function make_discrete_dilute!(dilSpecs)
    return function (integrator)
        p = integrator.p
        f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
        INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

        for j in 1:Int(nspecies)
            integrator.u[j] *= (1.0 - f_V)
        end

        if integrator.t < s1 * 60
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
            end
        elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        else
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end
end

function steady_state_time(e0_arr, p; required_cycles=3, atol=1e-4, rtol=1e-3)
    e0 = e0_arr[1]
    
    # Guard against invalid inputs that might crash the solver
    if e0 <= 0
        return 1000.0
    end
    
    initial_conditions = [e0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
    params = [2.0, 833.0, 4.0, 236.0, 0.0 * initial_conditions[1], 0.0, initial_conditions[2] * 0.0,
              1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
              3750.0, 54.75, 105.0, 100.0]
    f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, 20.0, 9.0, 0.0, 20.0, 100.0, 7.0

    dilSpecs = (
        [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],
        [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],
        [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51]
    )

    params_flat = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies])
    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, true))

    # Handle potential solver failures
    try
        prob = ODEProblem(
            model!, initial_conditions, (0.0, 1000.0), params_flat;
            isoutofdomain = (u, p, t) -> any(x -> x < 0.0, u)
        )

        sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb, 
                   abstol=1e-6, reltol=1e-6, maxiters=1000000)

        if sol.retcode != :Success
            return 1000.0  # High penalty for solver failure
        end

        t_detected = missing
        dilution_times = collect(0:tau:sol.t[end])
        matched_indices = [findfirst(t -> t >= dt, sol.t) for dt in dilution_times if dt <= sol.t[end]]

        consecutive_good = 0
        for i in 1:length(matched_indices)-1
            u_now = sol.u[matched_indices[i]]
            u_next = sol.u[matched_indices[i+1]]

            Δu = abs.(u_next .- u_now)
            scale = atol .+ rtol .* abs.(u_next)
            rel_change = maximum(Δu ./ scale)

            if rel_change < 1.0
                consecutive_good += 1
                if consecutive_good >= required_cycles
                    t_detected = sol.t[matched_indices[i]]
                    break
                end
            else
                consecutive_good = 0
            end
        end

        # Return time in hours, with a penalty if no steady-state
        if ismissing(t_detected) || isnan(t_detected) || isinf(t_detected)
            return 25.0  # 25 hours as penalty (1.5 * (1000.0 / 60))
        else
            return t_detected / 60
        end
    catch e
        println("Error in steady_state_time: ", e)
        return 1000.0  # High penalty for errors
    end
end

function objective_func(e0_arr, _)
    return steady_state_time(e0_arr, nothing)
end

e0_initial = [20000.0]
lb, ub = [1000.0], [60000.0]

println("\n=== Running Optimizations ===")
opt_prob = OptimizationProblem(objective_func, e0_initial, nothing; lb=lb, ub=ub)

sol_BBO = solve(opt_prob, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_PSO = solve(opt_prob, ParticleSwarm(n_particles=50), maxiters=100)

opt_func = OptimizationFunction(steady_state_time, Optimization.AutoForwardDiff())
opt_prob2 = OptimizationProblem(opt_func, e0_initial, nothing, lb=lb, ub=ub)

opt_func_ipn = OptimizationFunction(steady_state_time, SecondOrder(AutoForwardDiff(), AutoForwardDiff()))
opt_prob_ipn = OptimizationProblem(opt_func_ipn, e0_initial, nothing, lb=lb, ub=ub)

sol_NM = solve(opt_prob2, NelderMead())
sol_LBFGS = solve(opt_prob2, LBFGS())
sol_IPN = solve(opt_prob_ipn, IPNewton())



println("\n=== Final Optimization Results ===")
println("BBO: e0=$(sol_BBO.u[1]), time to steady state=$(sol_BBO.objective) hours")
println("PSO: e0=$(sol_PSO.u[1]), time to steady state=$(sol_PSO.objective) hours")
println("Nelder-Mead: e0=$(sol_NM.u[1]), time to steady state=$(sol_NM.objective) hours")
println("LBFGS: e0=$(sol_LBFGS.u[1]), time to steady state=$(sol_LBFGS.objective) hours")
println("IPNewton: e0=$(sol_IPN.u[1]), time to steady state=$(sol_IPN.objective) hours")