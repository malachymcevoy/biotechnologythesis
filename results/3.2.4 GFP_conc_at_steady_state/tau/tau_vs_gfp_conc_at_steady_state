using DataFrames, DifferentialEquations, Plots, DiffEqCallbacks

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function make_discrete_dilute!(dilSpecs)
    return function (integrator)
        p = integrator.p
        f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
        INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

        for j in 1:Int(nspecies)
            integrator.u[j] *= (1.0 - f_V)
        end

        if integrator.t < s1 * 60
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
            end
        elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        else
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end
end

tau_range = 1.0:1.0:120.0

function GFP_conc_at_steady_state(tau_range; required_cycles=2, tau=20.0, atol=1e-3, rtol=1e-2)
    results = DataFrame(tau_vals=Float64[], steady_state_GFP=Float64[])

    for tau_vals in tau_range

        initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
        params = [2.0, 833.0, 4.0, 236.0, 0.0,
                    0.0, initial_conditions[2] * 0.0,
                    1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
                    3750.0, 54.75, 105.0, 100.0]

        dilSpecs = (
            [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],
            [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],
            [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51]
        )

        f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, tau_vals, 9.0, 0.0, 20.0, 100.0, 7.0


        params_flat = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies])
        cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, true))

        prob = ODEProblem(
            model!, initial_conditions, (0.0, 1000.0), params_flat;
            isoutofdomain = (u, p, t) -> any(x -> x < 0.0, u)
        )

        sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb)

        # Steady state detection
        steady_GFP = missing
        dilution_times = collect(0:tau_vals:sol.t[end])
        matched_indices = [findfirst(t -> t >= dt, sol.t) for dt in dilution_times if dt <= sol.t[end]]

        consecutive_good = 0
        for i in 1:length(matched_indices)-1
            u_now = sol.u[matched_indices[i]]
            u_next = sol.u[matched_indices[i+1]]

            Δu = abs.(u_next .- u_now)
            scale = atol .+ rtol .* abs.(u_next)
            rel_change = maximum(Δu ./ scale)

            if rel_change < 1.0
                consecutive_good += 1
                if consecutive_good >= required_cycles
                    steady_GFP = sol.u[matched_indices[i]][6]  # supply the concentration of Gm at steady-state
                    break
                end
            else
                consecutive_good = 0
            end
        end

        push!(results, (tau_vals = tau_vals, steady_state_GFP = steady_GFP))
    end

    return results
end

data = GFP_conc_at_steady_state(tau_range)

# === Find maximum steady-state GFP and plot ===
max_idx = argmax(data.steady_state_GFP)
max_tau_val = data.tau_vals[max_idx]
max_GFP = data.steady_state_GFP[max_idx]

graph = plot(data.tau_vals, data.steady_state_GFP,
    xlabel = "Dilution interval (minutes)",
    ylabel = "GFP at steady state (µM)",
    title = "Effect of dilution interval on GFP at steady state",
    linewidth = 2,
    label = "GFP concentration at steady state",
    legend = :bottomright)

scatter!([max_tau_val], [max_GFP],
    markershape = :star5,
    markersize = 5,
    label = "Max GFP: $(round(max_GFP, digits=4)) at D₀ = $(round(max_tau_val, digits=4)) minutes"
)

# ===Tau points that failed to reach steady state ===
failed_tau_vals = data.tau_vals[isnan.(data.steady_state_GFP)]

if !isempty(failed_tau_vals)
    println("‼️‼️‼️ The following tau values did not reach steady state:")
    println(failed_tau_vals)
else
    println(" All tau values reached steady state.")
end

display(graph)
savefig("tau_vs_gfp_conc_at_steady_state")