using Plots, DifferentialEquations, Optim, OptimizationOptimJL, Optimization, Zygote, SciMLSensitivity, LineSearches, OptimizationBBO

function lotka_volterra(du, u, p, t)
    α, β, γ, δ = p
    x, y = u
    du[1] = α * x - β * x * y   # Prey population equation
    du[2] = -γ * y + δ * x * y  # Predator population equation
end

# === Optimization of peak prey population by changing x0 ===
function f(u,p)
	α, β, γ, δ = p
	x0 = u[1] 			# Optimization variable (initial prey population)
	tspan = (0.0, 100.0)

	u0 = [x0, p[5]]		# Define the initial prey/predator populations
	
	prob = ODEProblem(lotka_volterra, u0, tspan, p[1:4], isoutofdomain=(u, p, t) -> any(x -> x < 0, u)) # prevent any negative population values
	sol = solve(prob, Tsit5())

	peak_prey = maximum(sol[1, :]) # Extract the peak prey population from the ODE solution
	return -peak_prey
end

p_prey = [0.5, 1.0, 3.0, 1.0, 1.0] # Define parameter values for α, β, γ, δ and initial predator population
u0_prey = [5.0]		# Initial guess for prey population
lb_prey, ub_prey = [0.1], [50.0]

opt_func_prey = OptimizationFunction(f, AutoZygote())
opt_prob_prey = OptimizationProblem(opt_func_prey, u0_prey, p_prey; lb=lb_prey, ub=ub_prey)

sol_prey_BBO = solve(opt_prob_prey, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_prey_NM = solve(opt_prob_prey, NelderMead())
sol_prey_LBFGS = solve(opt_prob_prey, LBFGS())
sol_prey_IPN = solve(opt_prob_prey, IPNewton())

# === Optimization of peak predator population by changing y0 ===
function g(u, p)
	α, β, γ, δ = p
	y0 = u[1] 	# Optimization variable (initial predator population)
	tspan = (0.0, 100.0) # the time span for the simulation

	u0 = [p[5], y0]
	
	prob = ODEProblem(lotka_volterra, u0, tspan, p[1:4]; isoutofdomain=(u, p, t) -> any(x -> x < 0, u))
	sol = solve(prob, Tsit5())

	
	peak_predator = maximum(sol[2, :]) # maximum predator population
	return -peak_predator
end

p_pred = [0.5, 1.0, 3.0, 1.0, 1.0] # α, β, γ, δ and initial prey population
u0_pred = [5.0] # increasing this initial guess to 20.0 results in correctly converging values for LBFGS() and IPNewton(), escaping the rugged area of the function
lb_pred, ub_pred = [0.1], [50.0]

opt_func_pred = OptimizationFunction(g, AutoZygote())
opt_prob_pred = OptimizationProblem(opt_func_pred, u0_pred, p_pred; lb=lb_pred, ub=ub_pred)

# Solve predator population optimization with multiple optimizers
sol_pred_BBO = solve(opt_prob_pred, BBO_adaptive_de_rand_1_bin_radiuslimited())
sol_pred_NM = solve(opt_prob_pred, NelderMead())
sol_pred_LBFGS = solve(opt_prob_pred, LBFGS())
sol_pred_IPN = solve(opt_prob_pred, IPNewton())


# === Print results ===
println("BBO Optimizer Results (Prey):")
println("Optimal Initial Prey Population: ", sol_prey_BBO.u[1])
println("Maximum Peak Prey Population: ", -sol_prey_BBO.minimum)

println("\nNelder-Mead Optimizer Results (Prey):")
println("Optimal Initial Prey Population: ", sol_prey_NM.u[1])
println("Maximum Peak Prey Population: ", -sol_prey_NM.minimum)

println("\nLBFGS Optimizer Results (Prey):")
println("Optimal Initial Prey Population: ", sol_prey_LBFGS.u[1])
println("Maximum Peak Prey Population: ", -sol_prey_LBFGS.minimum)

println("\nIPN Optimizer Results (Prey):")
println("Optimal Initial Prey Population: ", sol_prey_IPN.u[1])
println("Maximum Peak Prey Population: ", -sol_prey_IPN.minimum)


println("\nBBO Optimizer Results (Predators):")
println("Optimal Initial Predator Population: ", sol_pred_BBO.u[1])
println("Maximum Peak Predator Population: ", -sol_pred_BBO.minimum)

println("\nNelder-Mead Optimizer Results (Predators):")
println("Optimal Initial Predator Population: ", sol_pred_NM.u[1])
println("Maximum Peak Predator Population: ", -sol_pred_NM.minimum)

println("\nLBFGS Optimizer Results (Predators):")
println("Optimal Initial Predator Population: ", sol_pred_LBFGS.u[1])
println("Maximum Peak Predator Population: ", -sol_pred_LBFGS.minimum)

println("\nIPN Optimizer Results (Predators):")
println("Optimal Initial Predator Population: ", sol_pred_IPN.u[1])
println("Maximum Peak Predator Population: ", -sol_pred_IPN.minimum)