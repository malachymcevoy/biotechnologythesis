using DifferentialEquations, DiffEqCallbacks, Plots

#region < ODE Model >
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, 33600.0 * 0.0, 0.0, 0.005 * 0.0,
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0, 3750.0, 54.75, 105.0, 100.0]
#endregion

#region < Discrete Dilution Callback >
function discreteDilute!(integrator)
    f_V, tau, s1, s2, tmax, tsave, nspecies, dilSpecs = integrator.p[end-7:end]
    INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C, INDEX_CONT, CONC_CONT_A, CONC_CONT_B = dilSpecs

    if integrator.t < s1 * 60  # Stage 1
        for j in 1:nspecies
            integrator.u[j] *= (1 - f_V)  # Dilution by factor (1 - f_V)
        end
        for j in 1:length(INDEX_DISC_A)
            integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]  # Add fresh material back in
        end
    elseif s1 * 60 <= integrator.t < s2 * 60  # Stage 2
        for j in 1:nspecies
            integrator.u[j] *= (1 - f_V)
        end
        for j in 1:length(INDEX_DISC_B)
            integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
        end
    elseif s2 * 60 <= integrator.t  # Stage 3
        for j in 1:nspecies
            integrator.u[j] *= (1 - f_V)
        end
        for j in 1:length(INDEX_DISC_C)
            integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
        end
    end
end

# Define the indices and concentrations for dilution stages
u0 = initial_conditions
idx_e, idx_D_G, idx_m_G, idx_cl_G, idx_G, idx_G_m, idx_R = 1, 2, 3, 4, 5, 6, 7

INDEX_DISC_A = [idx_e, idx_D_G, idx_R]
CONC_DISC_A = [u0[1], u0[2], u0[7]]
INDEX_DISC_B = [idx_e, idx_R]
CONC_DISC_B = [u0[1], u0[7]]
INDEX_DISC_C = [idx_e, idx_R]
CONC_DISC_C = [u0[1], u0[7]]
INDEX_CONT = [14, 15, 16]
CONC_CONT_A = [u0[1], 0.0, 1.51]
CONC_CONT_B = [u0[1], 0.0, 1.51]
dilSpecs = (INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C, INDEX_CONT, CONC_CONT_A, CONC_CONT_B)

# Dilution fraction and other fixed parameters
f_V = 0.2
s1, s2, tmax, tsave, nspecies = 9.0, 0.0, 20.0, 100.0, 7

# Tau values to be plotted
tau_values = [10, 20, 30, 80]

# Set default sizes for plot elements
default(
    size=(1000, 500),
    legend=:topright,  
    linewidth=2,       
    titlefontsize=12,  
    guidefontsize=8,   
    tickfontsize=6,     
    left_margin=20Plots.px
)

# Create the plot for energy change (e output) at different tau values
energy_plot = plot()
for tau in tau_values
    params_with_dilution = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies, dilSpecs])

    periodcb = PeriodicCallback(discreteDilute!, tau; save_positions=(false,false))
    cb = CallbackSet(periodcb)

    prob = ODEProblem(model!, initial_conditions, (0.0, 2000.0), params_with_dilution)
    sol = solve(prob, RadauIIA9(), callback=periodcb, saveat=1.0)

    time_vals = sol.t / 60
    plot!(energy_plot, time_vals, sol[1, :], label="τ = $tau")
end

xlabel!("Time (hours)")
ylabel!("Energy Concentration (μM)")


# Create the plot for energy change (e output) at different tau values
energy_plot = plot(size=(600,500))
for tau in tau_values
    params_with_dilution = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies, dilSpecs])
    periodcb = PeriodicCallback(discreteDilute!, tau; save_positions=(false,false))
    prob = ODEProblem(model!, initial_conditions, (0.0, 2000.0), params_with_dilution)
    sol = solve(prob, RadauIIA9(), callback=periodcb, saveat=1.0)
    time_vals = sol.t / 60
    plot!(energy_plot, time_vals, sol[1, :], label="τ = $tau")
end
xlabel!(energy_plot, "Time (hours)")
ylabel!(energy_plot, "Energy Concentration (μM)")
savefig(energy_plot, "energy_vs_tau.png")


# Create the plot for DNA (D output) at different tau values
DNA_plot = plot(size=(600,500))
for tau in tau_values
    params_with_dilution = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies, dilSpecs])
    periodcb = PeriodicCallback(discreteDilute!, tau; save_positions=(false,false))
    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_with_dilution)
    sol = solve(prob, Tsit5(), callback=periodcb, saveat=1.0)
    time_vals = sol.t / 60
    plot!(DNA_plot, time_vals, sol[2, :], label="τ = $tau")
end
xlabel!(DNA_plot, "Time (hours)")
ylabel!(DNA_plot, "DNA Concentration (μM)")
savefig(DNA_plot, "dna_vs_tau.png")