using DifferentialEquations, DiffEqCallbacks, Plots
gr(fmt=:png, dpi=300)

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function gfp_production_rate(u, p)
    _, ng, _, nG, _, _, _, _, _, _, _, _, _, _, _, Ktl = p[1:16]
    cl = u[4]
    e  = u[1]
    ktl = p[15]
    return cl * (ktl / nG) * (e / (Ktl + e))
end

function energy_consumption_rate(u, p)
    qx, ng, ql, nG, _, _, _, _, _, _, _, _, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u
    
    vtx = D * (ktx / ng) * (e / (Ktx + e))  # Transcription rate
    vtl = cl * (ktl / nG) * (e / (Ktl + e)) # Translation rate
    
    E_tx_rate = vtx * qx * ng  # Energy consumed by transcription
    E_tl_rate = vtl * ql * nG  # Energy consumed by translation
    
    return E_tx_rate + E_tl_rate
end

function make_discrete_dilute!(dilSpecs)
return function (integrator)
    p = integrator.p
    f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
    INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

    for j in 1:Int(nspecies)
        integrator.u[j] *= (1.0 - f_V)
    end

    if integrator.t < s1 * 60
        for j in 1:length(INDEX_DISC_A)
            integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
        end
    elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
        for j in 1:length(INDEX_DISC_B)
            integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
        end
    else
        for j in 1:length(INDEX_DISC_C)
            integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
        end
    end
end
end

# === Setup ===
initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params_base = [2.0, 833.0, 4.0, 236.0, initial_conditions[1] * 0.0,
               0.0, initial_conditions[2] * 0.0,
               1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0,
               3750.0, 54.75, 105.0, 100.0]
f_V = 0.2
s1, s2, tmax, tsave, nspecies = 9.0, 0.0, 20.0, 100.0, 7
tau_values = [10, 20, 30, 40, 80]

using Plots
gr(fmt=:png, dpi=300)

# Smooth tau sweep
tau_values_continuous = range(5.0, 120.0, length=150)

tau_list = Float64[]
total_gfp_list = Float64[]
total_energy_supplied_list = Float64[]
total_energy_consumed_list = Float64[]
pre_washout_dilution_list = Int[]

GFP_plot = plot()

for tau in tau_values_continuous
    dilution_times = [n * tau for n in 1:floor(Int, 1000.0 / tau) if n * tau <= 1000.0]
    pre_washout_dilutions = filter(t -> t < s1 * 60, dilution_times)

    num_dilutions = length(dilution_times)
    energy_per_dilution = f_V * initial_conditions[1]
    total_energy_supplied = initial_conditions[1] + num_dilutions * energy_per_dilution

    dilSpecs = (
        [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],
        [1, 7],    [initial_conditions[1], 1.51],
        [1, 7],    [initial_conditions[1], 1.51]
    )

    params_with_dilution = vcat(params_base, [f_V, tau, s1, s2, tmax, 0.0, nspecies])
    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, false))

    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_with_dilution)
    sol = solve(prob, RadauIIA9(), callback=cb, saveat=1.0)

    function compute_total_gfp(sol, params)
        total = 0.0
        for i in 2:length(sol.t)
            dt = sol.t[i] - sol.t[i-1]
            rate = gfp_production_rate(sol.u[i-1], params)
            total += rate * dt
        end
        return total
    end

    function compute_total_energy_consumed(sol, params)
        total = 0.0
        for i in 2:length(sol.t)
            dt = sol.t[i] - sol.t[i-1]
            e = sol.u[i][1]; D = sol.u[i][2]; cl = sol.u[i][4]
            rate = energy_consumption_rate([e, D, 0.0, cl, 0.0, 0.0, 0.0], params)
            total += rate * dt
        end
        return total
    end

    total_gfp = compute_total_gfp(sol, params_with_dilution)
    total_energy_consumed = compute_total_energy_consumed(sol, params_with_dilution)

    # Store
    push!(tau_list, tau)
    push!(total_gfp_list, total_gfp)
    push!(total_energy_consumed_list, total_energy_consumed)
    push!(total_energy_supplied_list, total_energy_supplied)
    push!(pre_washout_dilution_list, length(pre_washout_dilutions))
end

p2 = plot(tau_list, total_gfp_list, lw=2, color=:red, legend=false)
xlabel!(p2, "Dilution interval τ (min)")
ylabel!(p2, "Total GFP Produced (μM)")

p3 = plot(tau_list, total_energy_consumed_list, lw=2, color=:orange, legend=false)
xlabel!(p3, "Dilution interval τ (min)")
ylabel!(p3, "Total Energy Consumed (μM)")

p4 = plot(tau_list, total_energy_supplied_list, lw=2, color=:green, legend=false)
xlabel!(p4, "Dilution interval τ (min)")
ylabel!(p4, "Total Energy Supplied (μM)")

p5 = plot(tau_list, pre_washout_dilution_list, lw=2, color=:purple, legend=false)
xlabel!(p5, "Dilution interval τ (min)")
ylabel!(p5, "Number of dilutions")

# === Assemble the final figure ===
final_plot = plot(p2, p3, p4, p5; layout=(2,2), size=(1000,800))
savefig(final_plot, "tau_vs_gfp_energy_dilutions.png")