using DataFrames
using DifferentialEquations
using Plots
default(fmt=:png, dpi=300)

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R, E_tx, E_tl = u  

    vtx = D * (ktx / ng) * (e / (Ktx + e))  # Transcription rate
    vtl = cl * (ktl / nG) * (e / (Ktl + e)) # Translation rate

    E_tx_rate = vtx * qx * ng  # Energy consumed by transcription
    E_tl_rate = vtl * ql * nG  # Energy consumed by translation

    du[1] = - (E_tx_rate + E_tl_rate) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
    du[8] = E_tx_rate  # Cumulative energy consumption by transcription
    du[9] = E_tl_rate  # Cumulative energy consumption by translation
end

function make_discrete_dilute!(dilSpecs)
    return function (integrator)
        p = integrator.p
        f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
        INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

        for j in 1:Int(nspecies)
            integrator.u[j] *= (1.0 - f_V)
        end

        if integrator.t < s1 * 60
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
            end
        elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        else
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end
end

f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, 20.0, 9.0, 0.0, 20.0, 100.0, 9.0

dna_concentrations = [0.005, 0.01, 0.05, 0.1]
colors = [:red, :blue, :green, :orange]

# Create two separate subplots for transcription and translation energy
p1 = plot(xlabel="Time (hours)", ylabel="Transcription Energy Consumption (µM)")
p2 = plot(xlabel="Time (hours)", ylabel="Translation Energy Consumption (µM)", legend=:bottom, legend_position=:center)

for (i, dna) in enumerate(dna_concentrations)
    initial_conditions = [60000.0, dna, 0.0, 0.0, 0.0, 0.0, 1.51, 0.0, 0.0]
    
    params = [2.0, 833.0, 4.0, 236.0, 60000.0 * 0.0, 0.0, dna * 0.0,
    1000.0, 1.0, 0.038153465, 0.084, 0.0, 3750.0, 54.75, 105.0, 100.0]
    
    dilSpecs = (
        [1, 2, 7], [initial_conditions[1], dna, 1.51],       # DISC_A
        [1, 7],    [initial_conditions[1], 1.51],            # DISC_B
        [1, 7],    [initial_conditions[1], 1.51]             # DISC_C
    )

    params_flat = vcat(params, [f_V, tau, s1, s2, tmax, tsave, nspecies])

    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, false))

    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_flat)
    sol = solve(prob, RadauIIA9(), saveat=1.0, callback=cb)
    time_vals = sol.t / 60  # Convert to hours
    
    # Plot transcription energy on the first subplot
    plot!(p1, time_vals, sol[8, :], label="$(dna)μM DNA", color=colors[i], linestyle=:solid)
    
    # Plot translation energy on the second subplot
    plot!(p2, time_vals, sol[9, :], label="$(dna)μM DNA", color=colors[i], linestyle=:solid)
end

# Display the plots side by side with wider layout and adjusted margins
plot(p1, p2, layout=(1, 2), size=(1600, 600), left_margin=30Plots.px, right_margin=20Plots.px, top_margin=20Plots.px, bottom_margin=20Plots.px, legendfontsize=12, guidefontsize=12, titlefontsize=16)

# Save the figure
savefig("translation_transcription.png")