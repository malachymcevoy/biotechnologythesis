using DataFrames, DifferentialEquations, Plots, Optimization, OptimizationOptimJL, Zygote, DiffEqCallbacks, SciMLSensitivity, OptimizationBBO

# Define the model
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

# Define initial conditions and parameters
initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, 33600.0 * 0.0, 0.0, 0.005 * 0.0,
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * 0.0, 3750.0, 54.75, 105.0, 100.0]

# Define indices and concentrations for dilution stages
u0 = initial_conditions
idx_e, idx_D_G, idx_m_G, idx_cl_G, idx_G, idx_G_m, idx_R = 1, 2, 3, 4, 5, 6, 7

INDEX_DISC_A = [idx_e, idx_D_G, idx_R]
CONC_DISC_A = [u0[1], u0[2], u0[7]]
INDEX_DISC_B = [idx_e, idx_R]
CONC_DISC_B = [u0[1], u0[7]]
INDEX_DISC_C = [idx_e, idx_R]
CONC_DISC_C = [u0[1], u0[7]]
INDEX_CONT = [14, 15, 16]
CONC_CONT_A = [33600.0, 0.0, 1.51]
CONC_CONT_B = [33600.0, 0.0, 1.51]

dilSpecs = (INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C, INDEX_CONT, CONC_CONT_A, CONC_CONT_B)

f_V = 0.2
tau, s1, s2, tmax, tsave, nspecies = 20, 9.0, 0.0, 20.0, 100.0, 7.0

# Update discrete dilution callback to properly access the global dilSpecs
function discreteDilute!(integrator)
    f_V, tau, s1, s2, tmax, tsave, nspecies = integrator.p[end-6:end]
    
    # Adjust dilution logic based on dynamic time control
    if integrator.t < s1 * 60  # Stage 1
        for j in 1:7
            integrator.u[j] *= (1.0 - f_V)  # Dilution by factor (1 - f_V)
        end
        for j in 1:length(INDEX_DISC_A)
            integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]  # Add fresh material back in
        end
    elseif s1 * 60 <= integrator.t < s2 * 60  # Stage 2
        for j in 1:7
            integrator.u[j] *= (1 - f_V)
        end
        for j in 1:length(INDEX_DISC_B)
            integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
        end
    else  # Stage 3
        for j in 1:7
            integrator.u[j] *= (1 - f_V)
        end
        for j in 1:length(INDEX_DISC_C)
            integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
        end
    end
end

# Optimization function
function optimize_dilution_rate(x, p)
    if x[1] < 0.0 || x[1] > 600.0
        return Inf  # Apply a penalty for out-of-bounds x
    end
    
    params_flat = vcat(params, [f_V, x[1], s1, s2, tmax, tsave, nspecies])
    periodcb = PeriodicCallback(discreteDilute!, x[1]; save_positions=(false, false))
    prob = ODEProblem(model!, u0, (0.0, 1000.0), params_flat)
    sol = solve(prob, Tsit5(), callback=periodcb, saveat=1.0)
    max_Gm = maximum(sol[6, :])
    return -max_Gm  # Negative to minimize
end

# Use Nelder-Mead without Fminbox
opt_func = OptimizationFunction(optimize_dilution_rate, Optimization.AutoForwardDiff())  # AD backend required here for gradients, but it won't interfere
opt_prob = OptimizationProblem(opt_func, x_initial)

sol = solve(opt_prob, NelderMead(); maxiters=1000, f_calls_limit=1000)

# Print the results
println("Optimum dilution interval Ï„: ", sol.u[1])
println("Max GFP produced: ", -sol.objective)

sol.original

##### WILL GRADIENT METHODS NO LONGER WORK BECAUSE IT IS NOW A NON-CONTINUOUS FUNCTION?