using DataFrames, DifferentialEquations, Plots, Optimization, OptimizationOptimJL, Zygote, SciMLSensitivity

function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    Din = t < 540 ? Din_init : 0.0

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e  # Energy balance
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function optimize_dilution_rate(x,p)
    initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
    params = [2.0, 833.0, 4.0, 236.0, 33600.0 * (0.2 / x[1]), (0.2 / x[1]), 0.005 * (0.2 / x[1]),
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / x[1]), 3750.0, 54.75, 105.0, 100.0]

    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params)
    sol = solve(prob, RadauIIA5(), saveat=1.0)
    if any(isnan, sol[6, :])
        return Inf  # Penalize NaN solutions
    end
    max_Gm = maximum(sol[6, :])
    return -max_Gm  # Negative for minimization
end

x_initial = [20.0]
lb = [0.0]
ub = [600]

opt_func = OptimizationFunction(optimize_dilution_rate, AutoZygote())
opt_prob = OptimizationProblem(opt_func, x_initial, params; lb=lb, ub=ub)

sol = solve(opt_prob, LBFGS())

# Extract optimized values
optimal_τ = sol.u
max_Gm_opt = -sol.objective

println("Optimum dilution rate τ: ", optimal_τ)
println("Max GFP produced using these concentrations: ", max_Gm_opt)