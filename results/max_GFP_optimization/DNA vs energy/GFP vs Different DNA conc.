using DataFrames
using DifferentialEquations
using Plots


function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din_init, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p
    e, D, m, cl, G, Gm, R = u

    Din = t < 540 ? Din_init : 0.0

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

initial_conditions = [33600.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.51]
params = [2.0, 833.0, 4.0, 236.0, 33600.0 * (0.2 / 20.0), (0.2 / 20.0), initial_conditions[2] * (0.2 / 20.0),
          1000.0, 1.0, 0.038153465, 0.084, 1.51 * (0.2 / 20.0), 3750.0, 54.75, 105.0, 100.0]


dna_concentrations = [0.001, 0.005, 0.01, 0.015, 0.02]


GFP_plot = plot(xlabel="Time (minutes)", ylabel="GFP (Gm)", title="GFP Production for Different DNA Concentrations")


for dna in dna_concentrations
    modified_initial_conditions = copy(initial_conditions)
    modified_initial_conditions[2] = dna  

    modified_parameters = copy(params)
    modified_parameters[7] = dna * (0.2 / 20.0) 

    # Define and solve the ODE problem
    prob = ODEProblem(model!, modified_initial_conditions, (0.0, 1000.0), modified_parameters)
    sol = solve(prob, RadauIIA5(), saveat=1.0)
    
    time_vals = sol.t / 60  # Convert time to minutes
    plot!(GFP_plot, time_vals, sol[6, :], label="DNA: $dna Î¼M")  # Plot Gm over time with a label
end


display(GFP_plot)