using DataFrames, DifferentialEquations, Plots
gr(fmt=:png, dpi=300)

# === Model set up ===
function model!(du, u, p, t)
    qx, ng, ql, nG, ein, mu, Din, kb, ku, kd, km, Rin, ktx, Ktx, ktl, Ktl = p[1:16]
    e, D, m, cl, G, Gm, R = u

    vtx = D * (ktx / ng) * (e / (Ktx + e))
    vtl = cl * (ktl / nG) * (e / (Ktl + e))

    du[1] = - (vtx * qx * ng + vtl * ql * nG) + ein - mu * e
    du[2] = Din - mu * D
    du[3] = vtx - kb * R * m + ku * cl + vtl - kd * m - mu * m
    du[4] = kb * R * m - ku * cl - vtl - kd * cl - mu * cl
    du[5] = vtl - km * G - mu * G
    du[6] = km * G - mu * Gm
    du[7] = -kb * R * m + ku * cl + vtl + kd * cl + Rin - mu * R
end

function make_discrete_dilute!(dilSpecs)
    return function (integrator)
        p = integrator.p
        f_V, tau, s1, s2, _, _, nspecies = p[end-6:end]
        INDEX_DISC_A, CONC_DISC_A, INDEX_DISC_B, CONC_DISC_B, INDEX_DISC_C, CONC_DISC_C = dilSpecs

        for j in 1:Int(nspecies)
            integrator.u[j] *= (1.0 - f_V)
        end

        if integrator.t < s1 * 60
            for j in 1:length(INDEX_DISC_A)
                integrator.u[INDEX_DISC_A[j]] += f_V * CONC_DISC_A[j]
            end
        elseif integrator.t >= s1 * 60 && integrator.t < s2 * 60
            for j in 1:length(INDEX_DISC_B)
                integrator.u[INDEX_DISC_B[j]] += f_V * CONC_DISC_B[j]
            end
        else
            for j in 1:length(INDEX_DISC_C)
                integrator.u[INDEX_DISC_C[j]] += f_V * CONC_DISC_C[j]
            end
        end
    end
end

# Initial base params
params_base = [2.0, 833.0, 4.0, 236.0, 0.0,
               0.0, 0.0,
               1000.0, 1.0, 0.038153465, 0.084, 0.0,
               3750.0, 54.75, 105.0, 100.0]

f_V, tau, s1, s2, tmax, tsave, nspecies = 0.2, 20.0, 9.0, 0.0, 20.0, 100.0, 7.0


params_flat = vcat(params_base, [f_V, tau, s1, s2, tmax, tsave, nspecies])

# Prepare the DNA concentrations for different values
DNA_concentrations = [0.01, 0.025, 0.1, 0.15]
labels = ["D = 0.01", "D = 0.025", "D = 0.1", "D = 0.15"]

# Create plot
ODEfig = plot()

for (i, D0) in enumerate(DNA_concentrations)
    # Set initial conditions for the current DNA concentration
    initial_conditions = [33600.0, D0, 0.0, 0.0, 0.0, 0.0, 1.51]

    # Recreate params_flat with the new initial conditions
    params_flat[6] = initial_conditions[2] * 0.0  # Update D (related to DNA concentration)
    
    dilSpecs = (
    [1, 2, 7], [initial_conditions[1], initial_conditions[2], 1.51],
    [1, 7], [initial_conditions[1], 1.51],
    [1, 7], [initial_conditions[1], 1.51]
    )

    cb = PeriodicCallback(make_discrete_dilute!(dilSpecs), tau; save_positions=(false, false))

    # Create and solve the ODE
    prob = ODEProblem(model!, initial_conditions, (0.0, 1000.0), params_flat; isoutofdomain = (u, p, t) -> any(x -> x < 0.0, u))
    sol = solve(prob, RadauIIA5(), saveat=1.0, callback=cb)

    # Time in hours
    time_vals = sol.t / 60

    # Plot the results for the current DNA concentration
    plot!(ODEfig, time_vals, sol[6, :], label=labels[i])  # Assuming 'Gm' is index 6
end

# Customize and display the plot
xlabel!("Time (hours)")
ylabel!("Î¼M of molecules (Gm)")
plot!(legend=:topright)
display(ODEfig)

savefig("steady_state_comparison_DNA.png")