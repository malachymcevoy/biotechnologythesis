using OptimizationBBO, OptimizationOptimJL, ForwardDiff, Zygote, Printf

rosenbrock(u, p) = (p[1] - u[1])^2 + p[2] * (u[2] - u[1]^2)^2 # rosenbrock equation
p = [1.0, 100.0] # a and b values
x0 = [5.0, 5.0] # Initial guesses

lb = [-10, -10]
ub = [100, 100]

function get_iterations(result)
    try
        return result.stats.iterations
    catch
        return missing
    end
end

function get_objective(result)
    result.minimum
end

# === Gradient-based algorithms ===
opt_func_steepest = OptimizationFunction(rosenbrock, AutoZygote())
opt_prob_steepest = OptimizationProblem(opt_func_steepest, x0, p; lb, ub)
steepest_results = solve(opt_prob_steepest, GradientDescent())

opt_func_lbfgs = OptimizationFunction(rosenbrock, AutoZygote())
opt_prob_lbfgs = OptimizationProblem(opt_func_lbfgs, x0, p)
lbfgs_results = solve(opt_prob_lbfgs, LBFGS())

opt_func_newton = OptimizationFunction(rosenbrock, AutoForwardDiff())
opt_prob_newton = OptimizationProblem(opt_func_newton, x0, p)
newton_result = solve(opt_prob_newton, Newton())

cons = (res, x, p) -> res .= [x[1]^2 + x[2]^2]
opt_func_ipn = OptimizationFunction(rosenbrock, AutoForwardDiff(); cons = cons)
opt_prob_ipn = OptimizationProblem(opt_func_ipn, x0, p; lcons = [-Inf], ucons = [Inf])
ipn_result = solve(opt_prob_ipn, IPNewton())

# === Gradient-free algorithms ===
opt_prob_bbo = OptimizationProblem(rosenbrock, x0, p; lb, ub)
bbo_results = solve(opt_prob_bbo, BBO_adaptive_de_rand_1_bin_radiuslimited())

opt_prob_nm = OptimizationProblem(rosenbrock, x0, p)
nm_results = solve(opt_prob_nm, NelderMead())

# === Summary ===
println("\n=== Optimization Results Summary ===")
results = [
    ("Gradient Descent", steepest_results),
    ("LBFGS", lbfgs_results),
    ("Newton", newton_result),
    ("IPNewton", ipn_result),
    ("BBO", bbo_results),
    ("Nelder-Mead", nm_results)
]

println(rpad("Algorithm", 20), rpad("Iterations", 15), rpad("Final Objective", 20))
println("-"^55)
for (name, res) in results
    iters = get_iterations(res)
    obj = get_objective(res)
    println(rpad(name, 20), rpad(string(iters), 15), @sprintf("%.6f", obj))
end