using Plots
using Random

# Define the Rosenbrock function
function rosenbrock(u)
    return (1.0 - u[1])^2 + 100.0 * (u[2] - u[1]^2)^2
end

# Track the history of solutions
all_solutions = []

# Define the BBO algorithm (using the `BBO_adaptive_de_rand_1_bin_radiuslimited` method)
function bbo_rosenbrock(iterations, population_size=20, dimensions=2)
    # Initialize random population (initial guess)
    population = [rand(2) * 2 .- 1 for _ in 1:population_size]
    
    # Objective function evaluations for each individual
    fitness = [rosenbrock(individual) for individual in population]
    
    # Track the best solution found
    best_solution = population[argmin(fitness)]
    best_fitness = minimum(fitness)
    
    # Run the optimization for a fixed number of iterations
    for iter in 1:iterations
        # Create a new population (simplified, can be expanded with the actual BBO method)
        new_population = []
        
        for i in 1:population_size
            # Select individuals for the next generation (using BBO adaptive method)
            # Example using random selection (you can replace this with your BBO logic)
            selected = population[mod(i, population_size) + 1]
            # Mutation operation (for example purposes, we randomize slightly)
            new_individual = selected + 0.1 * (rand(2) .- 0.5)
            push!(new_population, new_individual)
        end
        
        # Evaluate new fitness
        new_fitness = [rosenbrock(individual) for individual in new_population]
        
        # Update population and best solution
        population = new_population
        fitness = new_fitness
        
        # Track the best solution found so far
        min_fitness = minimum(fitness)
        if min_fitness < best_fitness
            best_fitness = min_fitness
            best_solution = population[argmin(fitness)]
        end
        
        # Store the best solution at each iteration
        push!(all_solutions, best_solution)
    end
end

# Run the BBO algorithm
iterations = 50
bbo_rosenbrock(iterations)

# Extract x and y coordinates for plotting
xs = [sol[1] for sol in all_solutions]
ys = [sol[2] for sol in all_solutions]

# Plot the optimization path
plot(xs, ys, label="Optimization Path", color=:blue, linewidth=2)
scatter!([1.0], [1.0], label="Global Minimum", color=:green, markersize=8)

# Label the plot
xlabel!("X-axis")
ylabel!("Y-axis")
title!("Convergence of BBO on the Rosenbrock Function")