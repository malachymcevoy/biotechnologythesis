using Optim
using Plots

function nelder_mead_rosenbrock()
    # === Define the Rosenbrock Function ===
    rosenbrock(u) = (1.0 - u[1])^2 + 100.0 * (u[2] - u[1]^2)^2
    
    # === Initial Guess ===
    x0 = [-0.5, 1.0]  # Initial guess (same as LBFGS version)
    
    # === Run Nelder-Mead optimization while tracking vertices ===
    # We'll manually track the simplices
    n = length(x0)
    simplex_history = Vector{Vector{Vector{Float64}}}()
    
    # Initial simplex creation - similar to how Nelder-Mead initializes
    initial_simplex = [copy(x0)]
    α = 0.05  # Small step size for initial simplex
    for i in 1:n
        vertex = copy(x0)
        if vertex[i] != 0
            vertex[i] = (1 + α) * vertex[i]
        else
            vertex[i] = 0.00025
        end
        push!(initial_simplex, vertex)
    end
    push!(simplex_history, initial_simplex)
    
    # Run optimization while tracking trace
    result = optimize(rosenbrock, x0, NelderMead(),
                     Optim.Options(store_trace=true))
    
    # Extract trace information to reconstruct optimization path
    trace = Optim.trace(result)
    all_points = Vector{Vector{Float64}}()
    
    # Add trace points to our collection
    for state in trace
        push!(all_points, state.metadata["centroid"])
    end
    
    # Also include the vertices from our initial simplex
    for simplex in simplex_history
        append!(all_points, simplex)
    end
    
    # Add final result
    push!(all_points, Optim.minimizer(result))
    
    # Remove duplicates to get unique points visited
    unique_points = unique(all_points)
    
    # Extract x and y coordinates
    xs = [p[1] for p in unique_points]
    ys = [p[2] for p in unique_points]
    
    # === Create grid for contour plot ===
    grid_x = range(-1.5, 1.5, length=200)
    grid_y = range(-0.5, 2.5, length=200)
    
    # Compute function values
    Z = [rosenbrock([x, y]) for y in grid_y, x in grid_x]
    
    # Create logarithmic values for better visualization
    log_Z = log10.(Z .+ 1e-10)
    
    # Calculate levels for contours
    min_z = minimum(log_Z)
    max_z = maximum(log_Z)
    levels = range(min_z, max_z, length=20)
    
    # === Generate animation ===
    total_frames = min(length(trace) + 1, 100)  # Limit frames for smoother animation
    step_size = max(1, div(length(trace), total_frames))
    
    # Create animation
    anim = @animate for i in 1:step_size:length(trace)+1
        # Create contour plot
        p = contour(grid_x, grid_y, log_Z,
                   xlabel="x", ylabel="y",
                   levels=levels,
                   linewidth=1.5,
                   c=:viridis,
                   aspect_ratio=:equal,
                   clims=(min_z, max_z),
                   title="Nelder-Mead Optimization of Rosenbrock Function\nIteration $(i-1)",
                   xlims=(-1.5, 1.5), ylims=(-0.5, 2.5))
        
        # Plot all visited points up to current iteration
        max_points = min(i*3, length(unique_points))  # Show points incrementally
        scatter!(xs[1:max_points], ys[1:max_points], color=:red,
                markersize=4, label="Visited Points")
        
        # Create and plot current simplex (if available in trace)
        if i <= length(trace)
            # For simplicity, we'll use the centroid and move in different directions
            centroid = trace[i].metadata["centroid"]
            
            # Create a simple triangular simplex around the centroid for visualization
            # (This is just for visualization as we don't have the actual simplex)
            current_simplex = [
                centroid,
                centroid + [0.1, 0.1],
                centroid + [-0.1, 0.1]
            ]
            
            # Extract coordinates
            simplex_x = [v[1] for v in current_simplex]
            simplex_y = [v[2] for v in current_simplex]
            
            # Create closed polygon
            simplex_x_closed = [simplex_x; simplex_x[1]]
            simplex_y_closed = [simplex_y; simplex_y[1]]
            
            # Plot simplex
            plot!(simplex_x_closed, simplex_y_closed,
                 color=:blue, linewidth=1.5, linestyle=:dash, label="Current Region")
            
            scatter!([centroid[1]], [centroid[2]], color=:blue,
                    markersize=6, label="Current Point")
        end
        
        # Mark the global minimum
        scatter!([1.0], [1.0], color=:green, marker=:star,
                markersize=8, label="Global Minimum")
    end
    
    # Save the animation
    gif(anim, "rosenbrock_nelder_mead.gif", fps=5)
    
    return result
end

# Call the function to create the GIF
nelder_mead_rosenbrock()